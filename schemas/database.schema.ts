/*
 * ==========================================
 * |          GENERATED BY SUPAZOD          |
 * ==========================================
 */

import { z } from "zod";
import { type Json } from "./../types/database.types";

export const AffiliatePublicApplicationStatusSchema = z.union([
  z.literal("pending"),
  z.literal("approved"),
  z.literal("rejected"),
  z.literal("suspended"),
]);

export const AffiliatePayoutStatusSchema = z.union([
  z.literal("pending"),
  z.literal("processing"),
  z.literal("paid"),
  z.literal("failed"),
]);

export const ApplicationStatusSchema = z.union([
  z.literal("applied"),
  z.literal("pending_info"),
  z.literal("rejected"),
  z.literal("approved"),
]);

export const BookingNoteCategorySchema = z.union([
  z.literal("service_notes"),
  z.literal("customer_preferences"),
  z.literal("issues"),
  z.literal("results"),
  z.literal("follow_up"),
  z.literal("other"),
]);

export const BookingStatusSchema = z.union([
  z.literal("pending"),
  z.literal("confirmed"),
  z.literal("cancelled"),
  z.literal("completed"),
]);

export const DayOfWeekSchema = z.union([
  z.literal("monday"),
  z.literal("tuesday"),
  z.literal("wednesday"),
  z.literal("thursday"),
  z.literal("friday"),
  z.literal("saturday"),
  z.literal("sunday"),
]);

export const MediaTypeSchema = z.union([
  z.literal("avatar"),
  z.literal("service_image"),
  z.literal("review_image"),
  z.literal("chat_image"),
  z.literal("application_image"),
  z.literal("landing_asset"),
  z.literal("logo_asset"),
  z.literal("booking_note_image"),
  z.literal("other"),
]);

export const PaymentStatusSchema = z.union([
  z.literal("pending"),
  z.literal("requires_payment_method"),
  z.literal("requires_confirmation"),
  z.literal("requires_action"),
  z.literal("processing"),
  z.literal("requires_capture"),
  z.literal("cancelled"),
  z.literal("succeeded"),
]);

export const UserRoleSchema = z.union([
  z.literal("customer"),
  z.literal("stylist"),
  z.literal("admin"),
]);

export const jsonSchema: z.ZodSchema<Json> = z.lazy(() =>
  z
    .union([
      z.string(),
      z.number(),
      z.boolean(),
      z.record(z.union([jsonSchema, z.undefined()])),
      z.array(jsonSchema),
    ])
    .nullable(),
);

export const addressesRowSchema = z.object({
  city: z.string(),
  country: z.string(),
  country_code: z.string().nullable(),
  created_at: z.string(),
  entry_instructions: z.string().nullable(),
  id: z.string(),
  is_primary: z.boolean(),
  location: z.unknown().nullable(),
  nickname: z.string().nullable(),
  postal_code: z.string(),
  street_address: z.string(),
  updated_at: z.string(),
  user_id: z.string(),
});

export const addressesInsertSchema = z.object({
  city: z.string(),
  country: z.string(),
  country_code: z.string().optional().nullable(),
  created_at: z.string().optional(),
  entry_instructions: z.string().optional().nullable(),
  id: z.string().optional(),
  is_primary: z.boolean().optional(),
  location: z.unknown().optional().nullable(),
  nickname: z.string().optional().nullable(),
  postal_code: z.string(),
  street_address: z.string(),
  updated_at: z.string().optional(),
  user_id: z.string(),
});

export const addressesUpdateSchema = z.object({
  city: z.string().optional(),
  country: z.string().optional(),
  country_code: z.string().optional().nullable(),
  created_at: z.string().optional(),
  entry_instructions: z.string().optional().nullable(),
  id: z.string().optional(),
  is_primary: z.boolean().optional(),
  location: z.unknown().optional().nullable(),
  nickname: z.string().optional().nullable(),
  postal_code: z.string().optional(),
  street_address: z.string().optional(),
  updated_at: z.string().optional(),
  user_id: z.string().optional(),
});

export const addressesRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("addresses_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const affiliateApplicationsRowSchema = z.object({
  created_at: z.string(),
  expected_referrals: z.number().nullable(),
  id: z.string(),
  marketing_strategy: z.string().nullable(),
  reason: z.string(),
  review_notes: z.string().nullable(),
  reviewed_at: z.string().nullable(),
  reviewed_by: z.string().nullable(),
  social_media_reach: z.number().nullable(),
  status: AffiliatePublicApplicationStatusSchema,
  stylist_id: z.string(),
  terms_accepted: z.boolean(),
  terms_accepted_at: z.string().nullable(),
  updated_at: z.string(),
});

export const affiliateApplicationsInsertSchema = z.object({
  created_at: z.string().optional(),
  expected_referrals: z.number().optional().nullable(),
  id: z.string().optional(),
  marketing_strategy: z.string().optional().nullable(),
  reason: z.string(),
  review_notes: z.string().optional().nullable(),
  reviewed_at: z.string().optional().nullable(),
  reviewed_by: z.string().optional().nullable(),
  social_media_reach: z.number().optional().nullable(),
  status: AffiliatePublicApplicationStatusSchema.optional(),
  stylist_id: z.string(),
  terms_accepted: z.boolean().optional(),
  terms_accepted_at: z.string().optional().nullable(),
  updated_at: z.string().optional(),
});

export const affiliateApplicationsUpdateSchema = z.object({
  created_at: z.string().optional(),
  expected_referrals: z.number().optional().nullable(),
  id: z.string().optional(),
  marketing_strategy: z.string().optional().nullable(),
  reason: z.string().optional(),
  review_notes: z.string().optional().nullable(),
  reviewed_at: z.string().optional().nullable(),
  reviewed_by: z.string().optional().nullable(),
  social_media_reach: z.number().optional().nullable(),
  status: AffiliatePublicApplicationStatusSchema.optional(),
  stylist_id: z.string().optional(),
  terms_accepted: z.boolean().optional(),
  terms_accepted_at: z.string().optional().nullable(),
  updated_at: z.string().optional(),
});

export const affiliateApplicationsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("affiliate_applications_reviewed_by_fkey"),
    columns: z.tuple([z.literal("reviewed_by")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("affiliate_applications_stylist_id_fkey"),
    columns: z.tuple([z.literal("stylist_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const affiliateClicksRowSchema = z.object({
  affiliate_link_id: z.string(),
  booking_id: z.string().nullable(),
  city: z.string().nullable(),
  commission_amount: z.number(),
  converted: z.boolean(),
  converted_at: z.string().nullable(),
  country_code: z.string().nullable(),
  created_at: z.string(),
  id: z.string(),
  ip_address: z.string().nullable(),
  landing_page: z.string().nullable(),
  referrer: z.string().nullable(),
  stylist_id: z.string(),
  user_agent: z.string().nullable(),
  user_id: z.string().nullable(),
  visitor_id: z.string().nullable(),
});

export const affiliateClicksInsertSchema = z.object({
  affiliate_link_id: z.string(),
  booking_id: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  commission_amount: z.number().optional(),
  converted: z.boolean().optional(),
  converted_at: z.string().optional().nullable(),
  country_code: z.string().optional().nullable(),
  created_at: z.string().optional(),
  id: z.string().optional(),
  ip_address: z.string().optional().nullable(),
  landing_page: z.string().optional().nullable(),
  referrer: z.string().optional().nullable(),
  stylist_id: z.string(),
  user_agent: z.string().optional().nullable(),
  user_id: z.string().optional().nullable(),
  visitor_id: z.string().optional().nullable(),
});

export const affiliateClicksUpdateSchema = z.object({
  affiliate_link_id: z.string().optional(),
  booking_id: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  commission_amount: z.number().optional(),
  converted: z.boolean().optional(),
  converted_at: z.string().optional().nullable(),
  country_code: z.string().optional().nullable(),
  created_at: z.string().optional(),
  id: z.string().optional(),
  ip_address: z.string().optional().nullable(),
  landing_page: z.string().optional().nullable(),
  referrer: z.string().optional().nullable(),
  stylist_id: z.string().optional(),
  user_agent: z.string().optional().nullable(),
  user_id: z.string().optional().nullable(),
  visitor_id: z.string().optional().nullable(),
});

export const affiliateClicksRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("affiliate_clicks_affiliate_link_id_fkey"),
    columns: z.tuple([z.literal("affiliate_link_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("affiliate_links"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("affiliate_clicks_booking_id_fkey"),
    columns: z.tuple([z.literal("booking_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("bookings"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("affiliate_clicks_stylist_id_fkey"),
    columns: z.tuple([z.literal("stylist_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("affiliate_clicks_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const affiliateLinksRowSchema = z.object({
  application_id: z.string(),
  click_count: z.number(),
  commission_percentage: z.number(),
  conversion_count: z.number(),
  created_at: z.string(),
  expires_at: z.string().nullable(),
  id: z.string(),
  is_active: z.boolean(),
  link_code: z.string(),
  notes: z.string().nullable(),
  stylist_id: z.string(),
  total_commission_earned: z.number(),
  updated_at: z.string(),
});

export const affiliateLinksInsertSchema = z.object({
  application_id: z.string(),
  click_count: z.number().optional(),
  commission_percentage: z.number().optional(),
  conversion_count: z.number().optional(),
  created_at: z.string().optional(),
  expires_at: z.string().optional().nullable(),
  id: z.string().optional(),
  is_active: z.boolean().optional(),
  link_code: z.string(),
  notes: z.string().optional().nullable(),
  stylist_id: z.string(),
  total_commission_earned: z.number().optional(),
  updated_at: z.string().optional(),
});

export const affiliateLinksUpdateSchema = z.object({
  application_id: z.string().optional(),
  click_count: z.number().optional(),
  commission_percentage: z.number().optional(),
  conversion_count: z.number().optional(),
  created_at: z.string().optional(),
  expires_at: z.string().optional().nullable(),
  id: z.string().optional(),
  is_active: z.boolean().optional(),
  link_code: z.string().optional(),
  notes: z.string().optional().nullable(),
  stylist_id: z.string().optional(),
  total_commission_earned: z.number().optional(),
  updated_at: z.string().optional(),
});

export const affiliateLinksRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("affiliate_links_application_id_fkey"),
    columns: z.tuple([z.literal("application_id")]),
    isOneToOne: z.literal(true),
    referencedRelation: z.literal("affiliate_applications"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("affiliate_links_stylist_id_fkey"),
    columns: z.tuple([z.literal("stylist_id")]),
    isOneToOne: z.literal(true),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const affiliatePayoutsRowSchema = z.object({
  affiliate_link_id: z.string(),
  created_at: z.string(),
  currency: z.string(),
  id: z.string(),
  notes: z.string().nullable(),
  payout_amount: z.number(),
  period_end: z.string(),
  period_start: z.string(),
  processed_at: z.string().nullable(),
  processed_by: z.string().nullable(),
  status: AffiliatePayoutStatusSchema,
  stripe_payout_id: z.string().nullable(),
  stripe_transfer_id: z.string().nullable(),
  stylist_id: z.string(),
  total_bookings: z.number(),
  total_commission_earned: z.number(),
  updated_at: z.string(),
});

export const affiliatePayoutsInsertSchema = z.object({
  affiliate_link_id: z.string(),
  created_at: z.string().optional(),
  currency: z.string().optional(),
  id: z.string().optional(),
  notes: z.string().optional().nullable(),
  payout_amount: z.number(),
  period_end: z.string(),
  period_start: z.string(),
  processed_at: z.string().optional().nullable(),
  processed_by: z.string().optional().nullable(),
  status: AffiliatePayoutStatusSchema.optional(),
  stripe_payout_id: z.string().optional().nullable(),
  stripe_transfer_id: z.string().optional().nullable(),
  stylist_id: z.string(),
  total_bookings: z.number(),
  total_commission_earned: z.number(),
  updated_at: z.string().optional(),
});

export const affiliatePayoutsUpdateSchema = z.object({
  affiliate_link_id: z.string().optional(),
  created_at: z.string().optional(),
  currency: z.string().optional(),
  id: z.string().optional(),
  notes: z.string().optional().nullable(),
  payout_amount: z.number().optional(),
  period_end: z.string().optional(),
  period_start: z.string().optional(),
  processed_at: z.string().optional().nullable(),
  processed_by: z.string().optional().nullable(),
  status: AffiliatePayoutStatusSchema.optional(),
  stripe_payout_id: z.string().optional().nullable(),
  stripe_transfer_id: z.string().optional().nullable(),
  stylist_id: z.string().optional(),
  total_bookings: z.number().optional(),
  total_commission_earned: z.number().optional(),
  updated_at: z.string().optional(),
});

export const affiliatePayoutsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("affiliate_payouts_affiliate_link_id_fkey"),
    columns: z.tuple([z.literal("affiliate_link_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("affiliate_links"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("affiliate_payouts_processed_by_fkey"),
    columns: z.tuple([z.literal("processed_by")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("affiliate_payouts_stylist_id_fkey"),
    columns: z.tuple([z.literal("stylist_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const applicationCategoriesRowSchema = z.object({
  application_id: z.string(),
  category_id: z.string(),
});

export const applicationCategoriesInsertSchema = z.object({
  application_id: z.string(),
  category_id: z.string(),
});

export const applicationCategoriesUpdateSchema = z.object({
  application_id: z.string().optional(),
  category_id: z.string().optional(),
});

export const applicationCategoriesRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("application_categories_application_id_fkey"),
    columns: z.tuple([z.literal("application_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("applications"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("application_categories_category_id_fkey"),
    columns: z.tuple([z.literal("category_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("service_categories"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const applicationsRowSchema = z.object({
  address_geometry: z.unknown().nullable(),
  address_nickname: z.string().nullable(),
  birth_date: z.string(),
  city: z.string(),
  country: z.string(),
  country_code: z.string().nullable(),
  created_at: z.string(),
  email: z.string(),
  entry_instructions: z.string().nullable(),
  full_name: z.string(),
  id: z.string(),
  phone_number: z.string(),
  postal_code: z.string(),
  price_range_currency: z.string(),
  price_range_from: z.number(),
  price_range_to: z.number(),
  professional_experience: z.string(),
  status: ApplicationStatusSchema,
  street_address: z.string(),
  user_id: z.string().nullable(),
});

export const applicationsInsertSchema = z.object({
  address_geometry: z.unknown().optional().nullable(),
  address_nickname: z.string().optional().nullable(),
  birth_date: z.string(),
  city: z.string(),
  country: z.string(),
  country_code: z.string().optional().nullable(),
  created_at: z.string().optional(),
  email: z.string(),
  entry_instructions: z.string().optional().nullable(),
  full_name: z.string(),
  id: z.string().optional(),
  phone_number: z.string(),
  postal_code: z.string(),
  price_range_currency: z.string().optional(),
  price_range_from: z.number(),
  price_range_to: z.number(),
  professional_experience: z.string(),
  status: ApplicationStatusSchema.optional(),
  street_address: z.string(),
  user_id: z.string().optional().nullable(),
});

export const applicationsUpdateSchema = z.object({
  address_geometry: z.unknown().optional().nullable(),
  address_nickname: z.string().optional().nullable(),
  birth_date: z.string().optional(),
  city: z.string().optional(),
  country: z.string().optional(),
  country_code: z.string().optional().nullable(),
  created_at: z.string().optional(),
  email: z.string().optional(),
  entry_instructions: z.string().optional().nullable(),
  full_name: z.string().optional(),
  id: z.string().optional(),
  phone_number: z.string().optional(),
  postal_code: z.string().optional(),
  price_range_currency: z.string().optional(),
  price_range_from: z.number().optional(),
  price_range_to: z.number().optional(),
  professional_experience: z.string().optional(),
  status: ApplicationStatusSchema.optional(),
  street_address: z.string().optional(),
  user_id: z.string().optional().nullable(),
});

export const applicationsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("applications_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const bookingNotesRowSchema = z.object({
  booking_id: z.string(),
  category: BookingNoteCategorySchema,
  content: z.string(),
  created_at: z.string(),
  customer_visible: z.boolean(),
  duration_minutes: z.number().nullable(),
  id: z.string(),
  next_appointment_suggestion: z.string().nullable(),
  stylist_id: z.string(),
  tags: z.array(z.string()),
  updated_at: z.string(),
});

export const bookingNotesInsertSchema = z.object({
  booking_id: z.string(),
  category: BookingNoteCategorySchema.optional(),
  content: z.string(),
  created_at: z.string().optional(),
  customer_visible: z.boolean().optional(),
  duration_minutes: z.number().optional().nullable(),
  id: z.string().optional(),
  next_appointment_suggestion: z.string().optional().nullable(),
  stylist_id: z.string(),
  tags: z.array(z.string()).optional(),
  updated_at: z.string().optional(),
});

export const bookingNotesUpdateSchema = z.object({
  booking_id: z.string().optional(),
  category: BookingNoteCategorySchema.optional(),
  content: z.string().optional(),
  created_at: z.string().optional(),
  customer_visible: z.boolean().optional(),
  duration_minutes: z.number().optional().nullable(),
  id: z.string().optional(),
  next_appointment_suggestion: z.string().optional().nullable(),
  stylist_id: z.string().optional(),
  tags: z.array(z.string()).optional(),
  updated_at: z.string().optional(),
});

export const bookingNotesRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("booking_notes_booking_id_fkey"),
    columns: z.tuple([z.literal("booking_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("bookings"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("booking_notes_stylist_id_fkey"),
    columns: z.tuple([z.literal("stylist_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const bookingServicesRowSchema = z.object({
  booking_id: z.string(),
  service_id: z.string(),
});

export const bookingServicesInsertSchema = z.object({
  booking_id: z.string(),
  service_id: z.string(),
});

export const bookingServicesUpdateSchema = z.object({
  booking_id: z.string().optional(),
  service_id: z.string().optional(),
});

export const bookingServicesRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("booking_services_booking_id_fkey"),
    columns: z.tuple([z.literal("booking_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("bookings"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("booking_services_service_id_fkey"),
    columns: z.tuple([z.literal("service_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("services"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const bookingsRowSchema = z.object({
  address_id: z.string().nullable(),
  cancellation_reason: z.string().nullable(),
  cancelled_at: z.string().nullable(),
  created_at: z.string(),
  customer_id: z.string(),
  customer_receipt_email_sent_at: z.string().nullable(),
  discount_applied: z.number(),
  discount_id: z.string().nullable(),
  end_time: z.string(),
  id: z.string(),
  message_to_stylist: z.string().nullable(),
  payment_captured_at: z.string().nullable(),
  payout_email_sent_at: z.string().nullable(),
  payout_processed_at: z.string().nullable(),
  reschedule_reason: z.string().nullable(),
  rescheduled_at: z.string().nullable(),
  rescheduled_from: z.string().nullable(),
  start_time: z.string(),
  status: BookingStatusSchema,
  stripe_payment_intent_id: z.string().nullable(),
  stylist_id: z.string(),
  stylist_notification_email_sent_at: z.string().nullable(),
  total_duration_minutes: z.number(),
  total_price: z.number(),
  updated_at: z.string(),
});

export const bookingsInsertSchema = z.object({
  address_id: z.string().optional().nullable(),
  cancellation_reason: z.string().optional().nullable(),
  cancelled_at: z.string().optional().nullable(),
  created_at: z.string().optional(),
  customer_id: z.string(),
  customer_receipt_email_sent_at: z.string().optional().nullable(),
  discount_applied: z.number().optional(),
  discount_id: z.string().optional().nullable(),
  end_time: z.string(),
  id: z.string().optional(),
  message_to_stylist: z.string().optional().nullable(),
  payment_captured_at: z.string().optional().nullable(),
  payout_email_sent_at: z.string().optional().nullable(),
  payout_processed_at: z.string().optional().nullable(),
  reschedule_reason: z.string().optional().nullable(),
  rescheduled_at: z.string().optional().nullable(),
  rescheduled_from: z.string().optional().nullable(),
  start_time: z.string(),
  status: BookingStatusSchema.optional(),
  stripe_payment_intent_id: z.string().optional().nullable(),
  stylist_id: z.string(),
  stylist_notification_email_sent_at: z.string().optional().nullable(),
  total_duration_minutes: z.number(),
  total_price: z.number(),
  updated_at: z.string().optional(),
});

export const bookingsUpdateSchema = z.object({
  address_id: z.string().optional().nullable(),
  cancellation_reason: z.string().optional().nullable(),
  cancelled_at: z.string().optional().nullable(),
  created_at: z.string().optional(),
  customer_id: z.string().optional(),
  customer_receipt_email_sent_at: z.string().optional().nullable(),
  discount_applied: z.number().optional(),
  discount_id: z.string().optional().nullable(),
  end_time: z.string().optional(),
  id: z.string().optional(),
  message_to_stylist: z.string().optional().nullable(),
  payment_captured_at: z.string().optional().nullable(),
  payout_email_sent_at: z.string().optional().nullable(),
  payout_processed_at: z.string().optional().nullable(),
  reschedule_reason: z.string().optional().nullable(),
  rescheduled_at: z.string().optional().nullable(),
  rescheduled_from: z.string().optional().nullable(),
  start_time: z.string().optional(),
  status: BookingStatusSchema.optional(),
  stripe_payment_intent_id: z.string().optional().nullable(),
  stylist_id: z.string().optional(),
  stylist_notification_email_sent_at: z.string().optional().nullable(),
  total_duration_minutes: z.number().optional(),
  total_price: z.number().optional(),
  updated_at: z.string().optional(),
});

export const bookingsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("bookings_address_id_fkey"),
    columns: z.tuple([z.literal("address_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("addresses"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("bookings_customer_id_fkey"),
    columns: z.tuple([z.literal("customer_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("bookings_discount_id_fkey"),
    columns: z.tuple([z.literal("discount_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("discounts"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("bookings_stylist_id_fkey"),
    columns: z.tuple([z.literal("stylist_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const chatMessagesRowSchema = z.object({
  chat_id: z.string(),
  content: z.string(),
  created_at: z.string(),
  id: z.string(),
  is_read: z.boolean(),
  sender_id: z.string(),
});

export const chatMessagesInsertSchema = z.object({
  chat_id: z.string(),
  content: z.string(),
  created_at: z.string().optional(),
  id: z.string().optional(),
  is_read: z.boolean().optional(),
  sender_id: z.string(),
});

export const chatMessagesUpdateSchema = z.object({
  chat_id: z.string().optional(),
  content: z.string().optional(),
  created_at: z.string().optional(),
  id: z.string().optional(),
  is_read: z.boolean().optional(),
  sender_id: z.string().optional(),
});

export const chatMessagesRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("chat_messages_chat_id_fkey"),
    columns: z.tuple([z.literal("chat_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("chats"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("chat_messages_sender_id_fkey"),
    columns: z.tuple([z.literal("sender_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const chatsRowSchema = z.object({
  booking_id: z.string(),
  created_at: z.string(),
  id: z.string(),
  updated_at: z.string(),
});

export const chatsInsertSchema = z.object({
  booking_id: z.string(),
  created_at: z.string().optional(),
  id: z.string().optional(),
  updated_at: z.string().optional(),
});

export const chatsUpdateSchema = z.object({
  booking_id: z.string().optional(),
  created_at: z.string().optional(),
  id: z.string().optional(),
  updated_at: z.string().optional(),
});

export const chatsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("chats_booking_id_fkey"),
    columns: z.tuple([z.literal("booking_id")]),
    isOneToOne: z.literal(true),
    referencedRelation: z.literal("bookings"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const discountsRowSchema = z.object({
  code: z.string(),
  created_at: z.string(),
  currency: z.string(),
  current_uses: z.number(),
  description: z.string().nullable(),
  discount_amount: z.number().nullable(),
  discount_percentage: z.number().nullable(),
  expires_at: z.string().nullable(),
  id: z.string(),
  is_active: z.boolean(),
  max_uses: z.number().nullable(),
  max_uses_per_user: z.number(),
  minimum_order_amount: z.number().nullable(),
  updated_at: z.string(),
  valid_from: z.string(),
});

export const discountsInsertSchema = z.object({
  code: z.string(),
  created_at: z.string().optional(),
  currency: z.string().optional(),
  current_uses: z.number().optional(),
  description: z.string().optional().nullable(),
  discount_amount: z.number().optional().nullable(),
  discount_percentage: z.number().optional().nullable(),
  expires_at: z.string().optional().nullable(),
  id: z.string().optional(),
  is_active: z.boolean().optional(),
  max_uses: z.number().optional().nullable(),
  max_uses_per_user: z.number().optional(),
  minimum_order_amount: z.number().optional().nullable(),
  updated_at: z.string().optional(),
  valid_from: z.string().optional(),
});

export const discountsUpdateSchema = z.object({
  code: z.string().optional(),
  created_at: z.string().optional(),
  currency: z.string().optional(),
  current_uses: z.number().optional(),
  description: z.string().optional().nullable(),
  discount_amount: z.number().optional().nullable(),
  discount_percentage: z.number().optional().nullable(),
  expires_at: z.string().optional().nullable(),
  id: z.string().optional(),
  is_active: z.boolean().optional(),
  max_uses: z.number().optional().nullable(),
  max_uses_per_user: z.number().optional(),
  minimum_order_amount: z.number().optional().nullable(),
  updated_at: z.string().optional(),
  valid_from: z.string().optional(),
});

export const mediaRowSchema = z.object({
  application_id: z.string().nullable(),
  booking_note_id: z.string().nullable(),
  chat_message_id: z.string().nullable(),
  created_at: z.string(),
  file_path: z.string(),
  id: z.string(),
  is_preview_image: z.boolean(),
  media_type: MediaTypeSchema,
  owner_id: z.string().nullable(),
  review_id: z.string().nullable(),
  service_id: z.string().nullable(),
});

export const mediaInsertSchema = z.object({
  application_id: z.string().optional().nullable(),
  booking_note_id: z.string().optional().nullable(),
  chat_message_id: z.string().optional().nullable(),
  created_at: z.string().optional(),
  file_path: z.string(),
  id: z.string().optional(),
  is_preview_image: z.boolean().optional(),
  media_type: MediaTypeSchema,
  owner_id: z.string().optional().nullable(),
  review_id: z.string().optional().nullable(),
  service_id: z.string().optional().nullable(),
});

export const mediaUpdateSchema = z.object({
  application_id: z.string().optional().nullable(),
  booking_note_id: z.string().optional().nullable(),
  chat_message_id: z.string().optional().nullable(),
  created_at: z.string().optional(),
  file_path: z.string().optional(),
  id: z.string().optional(),
  is_preview_image: z.boolean().optional(),
  media_type: MediaTypeSchema.optional(),
  owner_id: z.string().optional().nullable(),
  review_id: z.string().optional().nullable(),
  service_id: z.string().optional().nullable(),
});

export const mediaRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("media_application_id_fkey"),
    columns: z.tuple([z.literal("application_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("applications"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("media_booking_note_id_fkey"),
    columns: z.tuple([z.literal("booking_note_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("booking_notes"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("media_chat_message_id_fkey"),
    columns: z.tuple([z.literal("chat_message_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("chat_messages"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("media_owner_id_fkey"),
    columns: z.tuple([z.literal("owner_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("media_review_id_fkey"),
    columns: z.tuple([z.literal("review_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("reviews"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("media_service_id_fkey"),
    columns: z.tuple([z.literal("service_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("services"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const paymentsRowSchema = z.object({
  affiliate_commission: z.number(),
  affiliate_commission_percentage: z.number().nullable(),
  affiliate_id: z.string().nullable(),
  authorized_at: z.string().nullable(),
  booking_id: z.string(),
  captured_at: z.string().nullable(),
  created_at: z.string(),
  currency: z.string(),
  discount_amount: z.number(),
  discount_code: z.string().nullable(),
  discount_fixed_amount: z.number().nullable(),
  discount_percentage: z.number().nullable(),
  final_amount: z.number(),
  id: z.string(),
  original_amount: z.number(),
  payment_intent_id: z.string(),
  payout_completed_at: z.string().nullable(),
  payout_initiated_at: z.string().nullable(),
  platform_fee: z.number(),
  refund_reason: z.string().nullable(),
  refunded_amount: z.number(),
  status: PaymentStatusSchema,
  stripe_application_fee_amount: z.number(),
  stylist_payout: z.number(),
  stylist_transfer_id: z.string().nullable(),
  succeeded_at: z.string().nullable(),
  updated_at: z.string(),
});

export const paymentsInsertSchema = z.object({
  affiliate_commission: z.number().optional(),
  affiliate_commission_percentage: z.number().optional().nullable(),
  affiliate_id: z.string().optional().nullable(),
  authorized_at: z.string().optional().nullable(),
  booking_id: z.string(),
  captured_at: z.string().optional().nullable(),
  created_at: z.string().optional(),
  currency: z.string().optional(),
  discount_amount: z.number().optional(),
  discount_code: z.string().optional().nullable(),
  discount_fixed_amount: z.number().optional().nullable(),
  discount_percentage: z.number().optional().nullable(),
  final_amount: z.number(),
  id: z.string().optional(),
  original_amount: z.number(),
  payment_intent_id: z.string(),
  payout_completed_at: z.string().optional().nullable(),
  payout_initiated_at: z.string().optional().nullable(),
  platform_fee: z.number(),
  refund_reason: z.string().optional().nullable(),
  refunded_amount: z.number().optional(),
  status: PaymentStatusSchema.optional(),
  stripe_application_fee_amount: z.number(),
  stylist_payout: z.number(),
  stylist_transfer_id: z.string().optional().nullable(),
  succeeded_at: z.string().optional().nullable(),
  updated_at: z.string().optional(),
});

export const paymentsUpdateSchema = z.object({
  affiliate_commission: z.number().optional(),
  affiliate_commission_percentage: z.number().optional().nullable(),
  affiliate_id: z.string().optional().nullable(),
  authorized_at: z.string().optional().nullable(),
  booking_id: z.string().optional(),
  captured_at: z.string().optional().nullable(),
  created_at: z.string().optional(),
  currency: z.string().optional(),
  discount_amount: z.number().optional(),
  discount_code: z.string().optional().nullable(),
  discount_fixed_amount: z.number().optional().nullable(),
  discount_percentage: z.number().optional().nullable(),
  final_amount: z.number().optional(),
  id: z.string().optional(),
  original_amount: z.number().optional(),
  payment_intent_id: z.string().optional(),
  payout_completed_at: z.string().optional().nullable(),
  payout_initiated_at: z.string().optional().nullable(),
  platform_fee: z.number().optional(),
  refund_reason: z.string().optional().nullable(),
  refunded_amount: z.number().optional(),
  status: PaymentStatusSchema.optional(),
  stripe_application_fee_amount: z.number().optional(),
  stylist_payout: z.number().optional(),
  stylist_transfer_id: z.string().optional().nullable(),
  succeeded_at: z.string().optional().nullable(),
  updated_at: z.string().optional(),
});

export const paymentsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("payments_affiliate_id_fkey"),
    columns: z.tuple([z.literal("affiliate_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("payments_booking_id_fkey"),
    columns: z.tuple([z.literal("booking_id")]),
    isOneToOne: z.literal(true),
    referencedRelation: z.literal("bookings"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const platformConfigRowSchema = z.object({
  config_key: z.string(),
  config_value: jsonSchema,
  created_at: z.string(),
  created_by: z.string(),
  description: z.string().nullable(),
  environment: z.string(),
  id: z.string(),
  is_active: z.boolean(),
  updated_at: z.string(),
});

export const platformConfigInsertSchema = z.object({
  config_key: z.string(),
  config_value: jsonSchema,
  created_at: z.string().optional(),
  created_by: z.string(),
  description: z.string().optional().nullable(),
  environment: z.string().optional(),
  id: z.string().optional(),
  is_active: z.boolean().optional(),
  updated_at: z.string().optional(),
});

export const platformConfigUpdateSchema = z.object({
  config_key: z.string().optional(),
  config_value: jsonSchema.optional(),
  created_at: z.string().optional(),
  created_by: z.string().optional(),
  description: z.string().optional().nullable(),
  environment: z.string().optional(),
  id: z.string().optional(),
  is_active: z.boolean().optional(),
  updated_at: z.string().optional(),
});

export const platformConfigRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("platform_config_created_by_fkey"),
    columns: z.tuple([z.literal("created_by")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const profilesRowSchema = z.object({
  bankid_verified: z.boolean(),
  created_at: z.string(),
  email: z.string().nullable(),
  full_name: z.string().nullable(),
  id: z.string(),
  phone_number: z.string().nullable(),
  role: UserRoleSchema,
  stripe_customer_id: z.string().nullable(),
  updated_at: z.string(),
});

export const profilesInsertSchema = z.object({
  bankid_verified: z.boolean().optional(),
  created_at: z.string().optional(),
  email: z.string().optional().nullable(),
  full_name: z.string().optional().nullable(),
  id: z.string(),
  phone_number: z.string().optional().nullable(),
  role: UserRoleSchema.optional(),
  stripe_customer_id: z.string().optional().nullable(),
  updated_at: z.string().optional(),
});

export const profilesUpdateSchema = z.object({
  bankid_verified: z.boolean().optional(),
  created_at: z.string().optional(),
  email: z.string().optional().nullable(),
  full_name: z.string().optional().nullable(),
  id: z.string().optional(),
  phone_number: z.string().optional().nullable(),
  role: UserRoleSchema.optional(),
  stripe_customer_id: z.string().optional().nullable(),
  updated_at: z.string().optional(),
});

export const recurringUnavailabilityExceptionsRowSchema = z.object({
  id: z.string(),
  new_end_time: z.string().nullable(),
  new_start_time: z.string().nullable(),
  original_start_time: z.string(),
  series_id: z.string(),
});

export const recurringUnavailabilityExceptionsInsertSchema = z.object({
  id: z.string().optional(),
  new_end_time: z.string().optional().nullable(),
  new_start_time: z.string().optional().nullable(),
  original_start_time: z.string(),
  series_id: z.string(),
});

export const recurringUnavailabilityExceptionsUpdateSchema = z.object({
  id: z.string().optional(),
  new_end_time: z.string().optional().nullable(),
  new_start_time: z.string().optional().nullable(),
  original_start_time: z.string().optional(),
  series_id: z.string().optional(),
});

export const recurringUnavailabilityExceptionsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal(
      "recurring_unavailability_exceptions_series_id_fkey",
    ),
    columns: z.tuple([z.literal("series_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("stylist_recurring_unavailability"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const reviewsRowSchema = z.object({
  booking_id: z.string(),
  comment: z.string().nullable(),
  created_at: z.string(),
  customer_id: z.string(),
  id: z.string(),
  rating: z.number(),
  stylist_id: z.string(),
});

export const reviewsInsertSchema = z.object({
  booking_id: z.string(),
  comment: z.string().optional().nullable(),
  created_at: z.string().optional(),
  customer_id: z.string(),
  id: z.string().optional(),
  rating: z.number(),
  stylist_id: z.string(),
});

export const reviewsUpdateSchema = z.object({
  booking_id: z.string().optional(),
  comment: z.string().optional().nullable(),
  created_at: z.string().optional(),
  customer_id: z.string().optional(),
  id: z.string().optional(),
  rating: z.number().optional(),
  stylist_id: z.string().optional(),
});

export const reviewsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("reviews_booking_id_fkey"),
    columns: z.tuple([z.literal("booking_id")]),
    isOneToOne: z.literal(true),
    referencedRelation: z.literal("bookings"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("reviews_customer_id_fkey"),
    columns: z.tuple([z.literal("customer_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("reviews_stylist_id_fkey"),
    columns: z.tuple([z.literal("stylist_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const serviceCategoriesRowSchema = z.object({
  description: z.string().nullable(),
  id: z.string(),
  name: z.string(),
  parent_category_id: z.string().nullable(),
});

export const serviceCategoriesInsertSchema = z.object({
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  name: z.string(),
  parent_category_id: z.string().optional().nullable(),
});

export const serviceCategoriesUpdateSchema = z.object({
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  name: z.string().optional(),
  parent_category_id: z.string().optional().nullable(),
});

export const serviceCategoriesRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("service_categories_parent_category_id_fkey"),
    columns: z.tuple([z.literal("parent_category_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("service_categories"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const serviceServiceCategoriesRowSchema = z.object({
  category_id: z.string(),
  service_id: z.string(),
});

export const serviceServiceCategoriesInsertSchema = z.object({
  category_id: z.string(),
  service_id: z.string(),
});

export const serviceServiceCategoriesUpdateSchema = z.object({
  category_id: z.string().optional(),
  service_id: z.string().optional(),
});

export const serviceServiceCategoriesRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("service_service_categories_category_id_fkey"),
    columns: z.tuple([z.literal("category_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("service_categories"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("service_service_categories_service_id_fkey"),
    columns: z.tuple([z.literal("service_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("services"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const servicesRowSchema = z.object({
  at_customer_place: z.boolean(),
  at_stylist_place: z.boolean(),
  created_at: z.string(),
  currency: z.string(),
  description: z.string().nullable(),
  duration_minutes: z.number(),
  id: z.string(),
  includes: z.array(z.string()).nullable(),
  is_published: z.boolean(),
  price: z.number(),
  requirements: z.array(z.string()).nullable(),
  stylist_id: z.string(),
  title: z.string(),
  updated_at: z.string(),
});

export const servicesInsertSchema = z.object({
  at_customer_place: z.boolean().optional(),
  at_stylist_place: z.boolean().optional(),
  created_at: z.string().optional(),
  currency: z.string().optional(),
  description: z.string().optional().nullable(),
  duration_minutes: z.number(),
  id: z.string().optional(),
  includes: z.array(z.string()).optional().nullable(),
  is_published: z.boolean().optional(),
  price: z.number(),
  requirements: z.array(z.string()).optional().nullable(),
  stylist_id: z.string(),
  title: z.string(),
  updated_at: z.string().optional(),
});

export const servicesUpdateSchema = z.object({
  at_customer_place: z.boolean().optional(),
  at_stylist_place: z.boolean().optional(),
  created_at: z.string().optional(),
  currency: z.string().optional(),
  description: z.string().optional().nullable(),
  duration_minutes: z.number().optional(),
  id: z.string().optional(),
  includes: z.array(z.string()).optional().nullable(),
  is_published: z.boolean().optional(),
  price: z.number().optional(),
  requirements: z.array(z.string()).optional().nullable(),
  stylist_id: z.string().optional(),
  title: z.string().optional(),
  updated_at: z.string().optional(),
});

export const servicesRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("services_stylist_id_fkey"),
    columns: z.tuple([z.literal("stylist_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const stylistAvailabilityRulesRowSchema = z.object({
  day_of_week: DayOfWeekSchema,
  end_time: z.string(),
  id: z.string(),
  start_time: z.string(),
  stylist_id: z.string(),
});

export const stylistAvailabilityRulesInsertSchema = z.object({
  day_of_week: DayOfWeekSchema,
  end_time: z.string(),
  id: z.string().optional(),
  start_time: z.string(),
  stylist_id: z.string(),
});

export const stylistAvailabilityRulesUpdateSchema = z.object({
  day_of_week: DayOfWeekSchema.optional(),
  end_time: z.string().optional(),
  id: z.string().optional(),
  start_time: z.string().optional(),
  stylist_id: z.string().optional(),
});

export const stylistAvailabilityRulesRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("stylist_availability_rules_stylist_id_fkey"),
    columns: z.tuple([z.literal("stylist_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const stylistDetailsRowSchema = z.object({
  bio: z.string().nullable(),
  can_travel: z.boolean(),
  created_at: z.string(),
  facebook_profile: z.string().nullable(),
  has_own_place: z.boolean(),
  instagram_profile: z.string().nullable(),
  other_social_media_urls: z.array(z.string()).nullable(),
  profile_id: z.string(),
  snapchat_profile: z.string().nullable(),
  stripe_account_id: z.string().nullable(),
  tiktok_profile: z.string().nullable(),
  travel_distance_km: z.number().nullable(),
  updated_at: z.string(),
  youtube_profile: z.string().nullable(),
});

export const stylistDetailsInsertSchema = z.object({
  bio: z.string().optional().nullable(),
  can_travel: z.boolean().optional(),
  created_at: z.string().optional(),
  facebook_profile: z.string().optional().nullable(),
  has_own_place: z.boolean().optional(),
  instagram_profile: z.string().optional().nullable(),
  other_social_media_urls: z.array(z.string()).optional().nullable(),
  profile_id: z.string(),
  snapchat_profile: z.string().optional().nullable(),
  stripe_account_id: z.string().optional().nullable(),
  tiktok_profile: z.string().optional().nullable(),
  travel_distance_km: z.number().optional().nullable(),
  updated_at: z.string().optional(),
  youtube_profile: z.string().optional().nullable(),
});

export const stylistDetailsUpdateSchema = z.object({
  bio: z.string().optional().nullable(),
  can_travel: z.boolean().optional(),
  created_at: z.string().optional(),
  facebook_profile: z.string().optional().nullable(),
  has_own_place: z.boolean().optional(),
  instagram_profile: z.string().optional().nullable(),
  other_social_media_urls: z.array(z.string()).optional().nullable(),
  profile_id: z.string().optional(),
  snapchat_profile: z.string().optional().nullable(),
  stripe_account_id: z.string().optional().nullable(),
  tiktok_profile: z.string().optional().nullable(),
  travel_distance_km: z.number().optional().nullable(),
  updated_at: z.string().optional(),
  youtube_profile: z.string().optional().nullable(),
});

export const stylistDetailsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("stylist_details_profile_id_fkey"),
    columns: z.tuple([z.literal("profile_id")]),
    isOneToOne: z.literal(true),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const stylistRecurringUnavailabilityRowSchema = z.object({
  end_time: z.string(),
  id: z.string(),
  rrule: z.string(),
  series_end_date: z.string().nullable(),
  series_start_date: z.string(),
  start_time: z.string(),
  stylist_id: z.string(),
  title: z.string().nullable(),
});

export const stylistRecurringUnavailabilityInsertSchema = z.object({
  end_time: z.string(),
  id: z.string().optional(),
  rrule: z.string(),
  series_end_date: z.string().optional().nullable(),
  series_start_date: z.string(),
  start_time: z.string(),
  stylist_id: z.string(),
  title: z.string().optional().nullable(),
});

export const stylistRecurringUnavailabilityUpdateSchema = z.object({
  end_time: z.string().optional(),
  id: z.string().optional(),
  rrule: z.string().optional(),
  series_end_date: z.string().optional().nullable(),
  series_start_date: z.string().optional(),
  start_time: z.string().optional(),
  stylist_id: z.string().optional(),
  title: z.string().optional().nullable(),
});

export const stylistRecurringUnavailabilityRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal(
      "stylist_recurring_unavailability_stylist_id_fkey",
    ),
    columns: z.tuple([z.literal("stylist_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const stylistUnavailabilityRowSchema = z.object({
  end_time: z.string(),
  id: z.string(),
  reason: z.string().nullable(),
  start_time: z.string(),
  stylist_id: z.string(),
});

export const stylistUnavailabilityInsertSchema = z.object({
  end_time: z.string(),
  id: z.string().optional(),
  reason: z.string().optional().nullable(),
  start_time: z.string(),
  stylist_id: z.string(),
});

export const stylistUnavailabilityUpdateSchema = z.object({
  end_time: z.string().optional(),
  id: z.string().optional(),
  reason: z.string().optional().nullable(),
  start_time: z.string().optional(),
  stylist_id: z.string().optional(),
});

export const stylistUnavailabilityRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("stylist_unavailability_stylist_id_fkey"),
    columns: z.tuple([z.literal("stylist_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const userPreferencesRowSchema = z.object({
  application_status_updates: z.boolean(),
  booking_cancellations: z.boolean(),
  booking_confirmations: z.boolean(),
  booking_reminders: z.boolean(),
  booking_status_updates: z.boolean(),
  chat_messages: z.boolean(),
  created_at: z.string(),
  email_delivery: z.boolean(),
  id: z.string(),
  marketing_emails: z.boolean(),
  new_booking_requests: z.boolean(),
  newsletter_subscribed: z.boolean(),
  payment_notifications: z.boolean(),
  promotional_sms: z.boolean(),
  push_notifications: z.boolean(),
  review_notifications: z.boolean(),
  sms_delivery: z.boolean(),
  updated_at: z.string(),
  user_id: z.string(),
});

export const userPreferencesInsertSchema = z.object({
  application_status_updates: z.boolean().optional(),
  booking_cancellations: z.boolean().optional(),
  booking_confirmations: z.boolean().optional(),
  booking_reminders: z.boolean().optional(),
  booking_status_updates: z.boolean().optional(),
  chat_messages: z.boolean().optional(),
  created_at: z.string().optional(),
  email_delivery: z.boolean().optional(),
  id: z.string().optional(),
  marketing_emails: z.boolean().optional(),
  new_booking_requests: z.boolean().optional(),
  newsletter_subscribed: z.boolean().optional(),
  payment_notifications: z.boolean().optional(),
  promotional_sms: z.boolean().optional(),
  push_notifications: z.boolean().optional(),
  review_notifications: z.boolean().optional(),
  sms_delivery: z.boolean().optional(),
  updated_at: z.string().optional(),
  user_id: z.string(),
});

export const userPreferencesUpdateSchema = z.object({
  application_status_updates: z.boolean().optional(),
  booking_cancellations: z.boolean().optional(),
  booking_confirmations: z.boolean().optional(),
  booking_reminders: z.boolean().optional(),
  booking_status_updates: z.boolean().optional(),
  chat_messages: z.boolean().optional(),
  created_at: z.string().optional(),
  email_delivery: z.boolean().optional(),
  id: z.string().optional(),
  marketing_emails: z.boolean().optional(),
  new_booking_requests: z.boolean().optional(),
  newsletter_subscribed: z.boolean().optional(),
  payment_notifications: z.boolean().optional(),
  promotional_sms: z.boolean().optional(),
  push_notifications: z.boolean().optional(),
  review_notifications: z.boolean().optional(),
  sms_delivery: z.boolean().optional(),
  updated_at: z.string().optional(),
  user_id: z.string().optional(),
});

export const userPreferencesRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("user_preferences_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(true),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const getMyRoleArgsSchema = z.object({});

export const getMyRoleReturnsSchema = UserRoleSchema;

export const nearbyAddressesArgsSchema = z.object({
  lat: z.number(),
  long: z.number(),
  radius_km: z.number().optional(),
});

export const nearbyAddressesReturnsSchema = z.array(
  z.object({
    id: z.string(),
    user_id: z.string(),
    nickname: z.string(),
    street_address: z.string(),
    city: z.string(),
    postal_code: z.string(),
    country: z.string(),
    entry_instructions: z.string(),
    is_primary: z.boolean(),
    lat: z.number(),
    long: z.number(),
    distance_meters: z.number(),
  }),
);

export const nearbyServicesArgsSchema = z.object({
  lat: z.number(),
  long: z.number(),
  radius_km: z.number().optional(),
  search_term: z.string().optional(),
  category_ids: z.array(z.string()).optional(),
  min_price_ore: z.number().optional(),
  max_price_ore: z.number().optional(),
  at_customer_place: z.boolean().optional(),
  at_stylist_place: z.boolean().optional(),
  stylist_ids: z.array(z.string()).optional(),
  sort_by: z.string().optional(),
});

export const nearbyServicesReturnsSchema = z.array(
  z.object({
    service_id: z.string(),
    service_title: z.string(),
    service_description: z.string(),
    service_price: z.number(),
    service_currency: z.string(),
    service_duration_minutes: z.number(),
    service_at_customer_place: z.boolean(),
    service_at_stylist_place: z.boolean(),
    service_is_published: z.boolean(),
    service_created_at: z.string(),
    stylist_id: z.string(),
    stylist_full_name: z.string(),
    stylist_bio: z.string(),
    stylist_can_travel: z.boolean(),
    stylist_has_own_place: z.boolean(),
    address_id: z.string(),
    address_street_address: z.string(),
    address_city: z.string(),
    address_postal_code: z.string(),
    address_country: z.string(),
    address_lat: z.number(),
    address_lng: z.number(),
    distance_meters: z.number(),
    total_reviews: z.number(),
    average_rating: z.number(),
  }),
);

export const spatialRefSysRowSchema = z.object({
  auth_name: z.string().nullable(),
  auth_srid: z.number().nullable(),
  proj4text: z.string().nullable(),
  srid: z.number(),
  srtext: z.string().nullable(),
});

export const spatialRefSysInsertSchema = z.object({
  auth_name: z.string().optional().nullable(),
  auth_srid: z.number().optional().nullable(),
  proj4text: z.string().optional().nullable(),
  srid: z.number(),
  srtext: z.string().optional().nullable(),
});

export const spatialRefSysUpdateSchema = z.object({
  auth_name: z.string().optional().nullable(),
  auth_srid: z.number().optional().nullable(),
  proj4text: z.string().optional().nullable(),
  srid: z.number().optional(),
  srtext: z.string().optional().nullable(),
});

export const geographyColumnsRowSchema = z.object({
  coord_dimension: z.number().nullable(),
  f_geography_column: z.unknown().nullable(),
  f_table_catalog: z.unknown().nullable(),
  f_table_name: z.unknown().nullable(),
  f_table_schema: z.unknown().nullable(),
  srid: z.number().nullable(),
  type: z.string().nullable(),
});

export const geometryColumnsRowSchema = z.object({
  coord_dimension: z.number().nullable(),
  f_geometry_column: z.unknown().nullable(),
  f_table_catalog: z.string().nullable(),
  f_table_name: z.unknown().nullable(),
  f_table_schema: z.unknown().nullable(),
  srid: z.number().nullable(),
  type: z.string().nullable(),
});

export const geometryColumnsInsertSchema = z.object({
  coord_dimension: z.number().optional().nullable(),
  f_geometry_column: z.unknown().optional().nullable(),
  f_table_catalog: z.string().optional().nullable(),
  f_table_name: z.unknown().optional().nullable(),
  f_table_schema: z.unknown().optional().nullable(),
  srid: z.number().optional().nullable(),
  type: z.string().optional().nullable(),
});

export const geometryColumnsUpdateSchema = z.object({
  coord_dimension: z.number().optional().nullable(),
  f_geometry_column: z.unknown().optional().nullable(),
  f_table_catalog: z.string().optional().nullable(),
  f_table_name: z.unknown().optional().nullable(),
  f_table_schema: z.unknown().optional().nullable(),
  srid: z.number().optional().nullable(),
  type: z.string().optional().nullable(),
});

export const postgisDeprecateArgsSchema = z.object({
  newname: z.string(),
  oldname: z.string(),
  version: z.string(),
});

export const postgisDeprecateReturnsSchema = z.undefined();

export const postgisIndexExtentArgsSchema = z.object({
  col: z.string(),
  tbl: z.unknown(),
});

export const postgisIndexExtentReturnsSchema = z.unknown();

export const postgisPgsqlVersionArgsSchema = z.object({});

export const postgisPgsqlVersionReturnsSchema = z.string();

export const postgisScriptsPgsqlVersionArgsSchema = z.object({});

export const postgisScriptsPgsqlVersionReturnsSchema = z.string();

export const postgisSelectivityArgsSchema = z.object({
  att_name: z.string(),
  geom: z.unknown(),
  mode: z.string().optional(),
  tbl: z.unknown(),
});

export const postgisSelectivityReturnsSchema = z.number();

export const st3dintersectsArgsSchema = z.object({
  geom1: z.unknown(),
  geom2: z.unknown(),
});

export const st3dintersectsReturnsSchema = z.boolean();

export const stBestsridArgsSchema = z.object({
  "": z.unknown(),
});

export const stBestsridReturnsSchema = z.number();

export const stContainsArgsSchema = z.object({
  geom1: z.unknown(),
  geom2: z.unknown(),
});

export const stContainsReturnsSchema = z.boolean();

export const stContainsproperlyArgsSchema = z.object({
  geom1: z.unknown(),
  geom2: z.unknown(),
});

export const stContainsproperlyReturnsSchema = z.boolean();

export const stCoveredbyArgsSchema = z.union([
  z.object({
    geog1: z.unknown(),
    geog2: z.unknown(),
  }),
  z.object({
    geom1: z.unknown(),
    geom2: z.unknown(),
  }),
]);

export const stCoveredbyReturnsSchema = z.boolean();

export const stCoversArgsSchema = z.union([
  z.object({
    geog1: z.unknown(),
    geog2: z.unknown(),
  }),
  z.object({
    geom1: z.unknown(),
    geom2: z.unknown(),
  }),
]);

export const stCoversReturnsSchema = z.boolean();

export const stCrossesArgsSchema = z.object({
  geom1: z.unknown(),
  geom2: z.unknown(),
});

export const stCrossesReturnsSchema = z.boolean();

export const stDwithinArgsSchema = z.object({
  geog1: z.unknown(),
  geog2: z.unknown(),
  tolerance: z.number(),
  use_spheroid: z.boolean().optional(),
});

export const stDwithinReturnsSchema = z.boolean();

export const stEqualsArgsSchema = z.object({
  geom1: z.unknown(),
  geom2: z.unknown(),
});

export const stEqualsReturnsSchema = z.boolean();

export const stIntersectsArgsSchema = z.union([
  z.object({
    geog1: z.unknown(),
    geog2: z.unknown(),
  }),
  z.object({
    geom1: z.unknown(),
    geom2: z.unknown(),
  }),
]);

export const stIntersectsReturnsSchema = z.boolean();

export const stLinecrossingdirectionArgsSchema = z.object({
  line1: z.unknown(),
  line2: z.unknown(),
});

export const stLinecrossingdirectionReturnsSchema = z.number();

export const stLongestlineArgsSchema = z.object({
  geom1: z.unknown(),
  geom2: z.unknown(),
});

export const stLongestlineReturnsSchema = z.unknown();

export const stMaxdistanceArgsSchema = z.object({
  geom1: z.unknown(),
  geom2: z.unknown(),
});

export const stMaxdistanceReturnsSchema = z.number();

export const stOrderingequalsArgsSchema = z.object({
  geom2: z.unknown(),
  geom1: z.unknown(),
});

export const stOrderingequalsReturnsSchema = z.boolean();

export const stOverlapsArgsSchema = z.object({
  geom1: z.unknown(),
  geom2: z.unknown(),
});

export const stOverlapsReturnsSchema = z.boolean();

export const stPointoutsideArgsSchema = z.object({
  "": z.unknown(),
});

export const stPointoutsideReturnsSchema = z.unknown();

export const stSortablehashArgsSchema = z.object({
  geom: z.unknown(),
});

export const stSortablehashReturnsSchema = z.number();

export const stTouchesArgsSchema = z.object({
  geom1: z.unknown(),
  geom2: z.unknown(),
});

export const stTouchesReturnsSchema = z.boolean();

export const stVoronoiArgsSchema = z.object({
  return_polygons: z.boolean().optional(),
  g1: z.unknown(),
  clip: z.unknown().optional(),
  tolerance: z.number().optional(),
});

export const stVoronoiReturnsSchema = z.unknown();

export const stWithinArgsSchema = z.object({
  geom1: z.unknown(),
  geom2: z.unknown(),
});

export const stWithinReturnsSchema = z.boolean();

export const addauthArgsSchema = z.object({
  "": z.string(),
});

export const addauthReturnsSchema = z.boolean();

export const addgeometrycolumnArgsSchema = z.union([
  z.object({
    new_type: z.string(),
    catalog_name: z.string(),
    schema_name: z.string(),
    table_name: z.string(),
    column_name: z.string(),
    new_srid_in: z.number(),
    new_dim: z.number(),
    use_typmod: z.boolean().optional(),
  }),
  z.object({
    schema_name: z.string(),
    table_name: z.string(),
    column_name: z.string(),
    new_srid: z.number(),
    new_type: z.string(),
    new_dim: z.number(),
    use_typmod: z.boolean().optional(),
  }),
  z.object({
    table_name: z.string(),
    column_name: z.string(),
    new_srid: z.number(),
    new_type: z.string(),
    new_dim: z.number(),
    use_typmod: z.boolean().optional(),
  }),
]);

export const addgeometrycolumnReturnsSchema = z.string();

export const boxArgsSchema = z.union([
  z.object({
    "": z.unknown(),
  }),
  z.object({
    "": z.unknown(),
  }),
]);

export const boxReturnsSchema = z.unknown();

export const box2dArgsSchema = z.union([
  z.object({
    "": z.unknown(),
  }),
  z.object({
    "": z.unknown(),
  }),
]);

export const box2dReturnsSchema = z.unknown();

export const box2dInArgsSchema = z.object({
  "": z.unknown(),
});

export const box2dInReturnsSchema = z.unknown();

export const box2dOutArgsSchema = z.object({
  "": z.unknown(),
});

export const box2dOutReturnsSchema = z.unknown();

export const box2dfInArgsSchema = z.object({
  "": z.unknown(),
});

export const box2dfInReturnsSchema = z.unknown();

export const box2dfOutArgsSchema = z.object({
  "": z.unknown(),
});

export const box2dfOutReturnsSchema = z.unknown();

export const box3dArgsSchema = z.union([
  z.object({
    "": z.unknown(),
  }),
  z.object({
    "": z.unknown(),
  }),
]);

export const box3dReturnsSchema = z.unknown();

export const box3dInArgsSchema = z.object({
  "": z.unknown(),
});

export const box3dInReturnsSchema = z.unknown();

export const box3dOutArgsSchema = z.object({
  "": z.unknown(),
});

export const box3dOutReturnsSchema = z.unknown();

export const box3dtoboxArgsSchema = z.object({
  "": z.unknown(),
});

export const box3dtoboxReturnsSchema = z.unknown();

export const byteaArgsSchema = z.union([
  z.object({
    "": z.unknown(),
  }),
  z.object({
    "": z.unknown(),
  }),
]);

export const byteaReturnsSchema = z.string();

export const disablelongtransactionsArgsSchema = z.object({});

export const disablelongtransactionsReturnsSchema = z.string();

export const dropgeometrycolumnArgsSchema = z.union([
  z.object({
    catalog_name: z.string(),
    schema_name: z.string(),
    table_name: z.string(),
    column_name: z.string(),
  }),
  z.object({
    schema_name: z.string(),
    table_name: z.string(),
    column_name: z.string(),
  }),
  z.object({
    table_name: z.string(),
    column_name: z.string(),
  }),
]);

export const dropgeometrycolumnReturnsSchema = z.string();

export const dropgeometrytableArgsSchema = z.union([
  z.object({
    catalog_name: z.string(),
    schema_name: z.string(),
    table_name: z.string(),
  }),
  z.object({
    schema_name: z.string(),
    table_name: z.string(),
  }),
  z.object({
    table_name: z.string(),
  }),
]);

export const dropgeometrytableReturnsSchema = z.string();

export const enablelongtransactionsArgsSchema = z.object({});

export const enablelongtransactionsReturnsSchema = z.string();

export const equalsArgsSchema = z.object({
  geom1: z.unknown(),
  geom2: z.unknown(),
});

export const equalsReturnsSchema = z.boolean();

export const geographyArgsSchema = z.union([
  z.object({
    "": z.string(),
  }),
  z.object({
    "": z.unknown(),
  }),
]);

export const geographyReturnsSchema = z.unknown();

export const geographyAnalyzeArgsSchema = z.object({
  "": z.unknown(),
});

export const geographyAnalyzeReturnsSchema = z.boolean();

export const geographyGistCompressArgsSchema = z.object({
  "": z.unknown(),
});

export const geographyGistCompressReturnsSchema = z.unknown();

export const geographyGistDecompressArgsSchema = z.object({
  "": z.unknown(),
});

export const geographyGistDecompressReturnsSchema = z.unknown();

export const geographyOutArgsSchema = z.object({
  "": z.unknown(),
});

export const geographyOutReturnsSchema = z.unknown();

export const geographySendArgsSchema = z.object({
  "": z.unknown(),
});

export const geographySendReturnsSchema = z.string();

export const geographySpgistCompressNdArgsSchema = z.object({
  "": z.unknown(),
});

export const geographySpgistCompressNdReturnsSchema = z.unknown();

export const geographyTypmodInArgsSchema = z.object({
  "": z.array(z.unknown()),
});

export const geographyTypmodInReturnsSchema = z.number();

export const geographyTypmodOutArgsSchema = z.object({
  "": z.number(),
});

export const geographyTypmodOutReturnsSchema = z.unknown();

export const geometryArgsSchema = z.union([
  z.object({
    "": z.string(),
  }),
  z.object({
    "": z.string(),
  }),
  z.object({
    "": z.unknown(),
  }),
  z.object({
    "": z.unknown(),
  }),
  z.object({
    "": z.unknown(),
  }),
  z.object({
    "": z.unknown(),
  }),
  z.object({
    "": z.unknown(),
  }),
  z.object({
    "": z.unknown(),
  }),
]);

export const geometryReturnsSchema = z.unknown();

export const geometryAboveArgsSchema = z.object({
  geom2: z.unknown(),
  geom1: z.unknown(),
});

export const geometryAboveReturnsSchema = z.boolean();

export const geometryAnalyzeArgsSchema = z.object({
  "": z.unknown(),
});

export const geometryAnalyzeReturnsSchema = z.boolean();

export const geometryBelowArgsSchema = z.object({
  geom1: z.unknown(),
  geom2: z.unknown(),
});

export const geometryBelowReturnsSchema = z.boolean();

export const geometryCmpArgsSchema = z.object({
  geom1: z.unknown(),
  geom2: z.unknown(),
});

export const geometryCmpReturnsSchema = z.number();

export const geometryContained3dArgsSchema = z.object({
  geom1: z.unknown(),
  geom2: z.unknown(),
});

export const geometryContained3dReturnsSchema = z.boolean();

export const geometryContainsArgsSchema = z.object({
  geom1: z.unknown(),
  geom2: z.unknown(),
});

export const geometryContainsReturnsSchema = z.boolean();

export const geometryContains3dArgsSchema = z.object({
  geom1: z.unknown(),
  geom2: z.unknown(),
});

export const geometryContains3dReturnsSchema = z.boolean();

export const geometryDistanceBoxArgsSchema = z.object({
  geom2: z.unknown(),
  geom1: z.unknown(),
});

export const geometryDistanceBoxReturnsSchema = z.number();

export const geometryDistanceCentroidArgsSchema = z.object({
  geom2: z.unknown(),
  geom1: z.unknown(),
});

export const geometryDistanceCentroidReturnsSchema = z.number();

export const geometryEqArgsSchema = z.object({
  geom1: z.unknown(),
  geom2: z.unknown(),
});

export const geometryEqReturnsSchema = z.boolean();

export const geometryGeArgsSchema = z.object({
  geom1: z.unknown(),
  geom2: z.unknown(),
});

export const geometryGeReturnsSchema = z.boolean();

export const geometryGistCompress2dArgsSchema = z.object({
  "": z.unknown(),
});

export const geometryGistCompress2dReturnsSchema = z.unknown();

export const geometryGistCompressNdArgsSchema = z.object({
  "": z.unknown(),
});

export const geometryGistCompressNdReturnsSchema = z.unknown();

export const geometryGistDecompress2dArgsSchema = z.object({
  "": z.unknown(),
});

export const geometryGistDecompress2dReturnsSchema = z.unknown();

export const geometryGistDecompressNdArgsSchema = z.object({
  "": z.unknown(),
});

export const geometryGistDecompressNdReturnsSchema = z.unknown();

export const geometryGistSortsupport2dArgsSchema = z.object({
  "": z.unknown(),
});

export const geometryGistSortsupport2dReturnsSchema = z.undefined();

export const geometryGtArgsSchema = z.object({
  geom1: z.unknown(),
  geom2: z.unknown(),
});

export const geometryGtReturnsSchema = z.boolean();

export const geometryHashArgsSchema = z.object({
  "": z.unknown(),
});

export const geometryHashReturnsSchema = z.number();

export const geometryInArgsSchema = z.object({
  "": z.unknown(),
});

export const geometryInReturnsSchema = z.unknown();

export const geometryLeArgsSchema = z.object({
  geom1: z.unknown(),
  geom2: z.unknown(),
});

export const geometryLeReturnsSchema = z.boolean();

export const geometryLeftArgsSchema = z.object({
  geom2: z.unknown(),
  geom1: z.unknown(),
});

export const geometryLeftReturnsSchema = z.boolean();

export const geometryLtArgsSchema = z.object({
  geom2: z.unknown(),
  geom1: z.unknown(),
});

export const geometryLtReturnsSchema = z.boolean();

export const geometryOutArgsSchema = z.object({
  "": z.unknown(),
});

export const geometryOutReturnsSchema = z.unknown();

export const geometryOveraboveArgsSchema = z.object({
  geom1: z.unknown(),
  geom2: z.unknown(),
});

export const geometryOveraboveReturnsSchema = z.boolean();

export const geometryOverbelowArgsSchema = z.object({
  geom1: z.unknown(),
  geom2: z.unknown(),
});

export const geometryOverbelowReturnsSchema = z.boolean();

export const geometryOverlapsArgsSchema = z.object({
  geom1: z.unknown(),
  geom2: z.unknown(),
});

export const geometryOverlapsReturnsSchema = z.boolean();

export const geometryOverlaps3dArgsSchema = z.object({
  geom1: z.unknown(),
  geom2: z.unknown(),
});

export const geometryOverlaps3dReturnsSchema = z.boolean();

export const geometryOverleftArgsSchema = z.object({
  geom1: z.unknown(),
  geom2: z.unknown(),
});

export const geometryOverleftReturnsSchema = z.boolean();

export const geometryOverrightArgsSchema = z.object({
  geom1: z.unknown(),
  geom2: z.unknown(),
});

export const geometryOverrightReturnsSchema = z.boolean();

export const geometryRecvArgsSchema = z.object({
  "": z.unknown(),
});

export const geometryRecvReturnsSchema = z.unknown();

export const geometryRightArgsSchema = z.object({
  geom2: z.unknown(),
  geom1: z.unknown(),
});

export const geometryRightReturnsSchema = z.boolean();

export const geometrySameArgsSchema = z.object({
  geom1: z.unknown(),
  geom2: z.unknown(),
});

export const geometrySameReturnsSchema = z.boolean();

export const geometrySame3dArgsSchema = z.object({
  geom1: z.unknown(),
  geom2: z.unknown(),
});

export const geometrySame3dReturnsSchema = z.boolean();

export const geometrySendArgsSchema = z.object({
  "": z.unknown(),
});

export const geometrySendReturnsSchema = z.string();

export const geometrySortsupportArgsSchema = z.object({
  "": z.unknown(),
});

export const geometrySortsupportReturnsSchema = z.undefined();

export const geometrySpgistCompress2dArgsSchema = z.object({
  "": z.unknown(),
});

export const geometrySpgistCompress2dReturnsSchema = z.unknown();

export const geometrySpgistCompress3dArgsSchema = z.object({
  "": z.unknown(),
});

export const geometrySpgistCompress3dReturnsSchema = z.unknown();

export const geometrySpgistCompressNdArgsSchema = z.object({
  "": z.unknown(),
});

export const geometrySpgistCompressNdReturnsSchema = z.unknown();

export const geometryTypmodInArgsSchema = z.object({
  "": z.array(z.unknown()),
});

export const geometryTypmodInReturnsSchema = z.number();

export const geometryTypmodOutArgsSchema = z.object({
  "": z.number(),
});

export const geometryTypmodOutReturnsSchema = z.unknown();

export const geometryWithinArgsSchema = z.object({
  geom1: z.unknown(),
  geom2: z.unknown(),
});

export const geometryWithinReturnsSchema = z.boolean();

export const geometrytypeArgsSchema = z.union([
  z.object({
    "": z.unknown(),
  }),
  z.object({
    "": z.unknown(),
  }),
]);

export const geometrytypeReturnsSchema = z.string();

export const geomfromewkbArgsSchema = z.object({
  "": z.string(),
});

export const geomfromewkbReturnsSchema = z.unknown();

export const geomfromewktArgsSchema = z.object({
  "": z.string(),
});

export const geomfromewktReturnsSchema = z.unknown();

export const getProj4FromSridArgsSchema = z.object({
  "": z.number(),
});

export const getProj4FromSridReturnsSchema = z.string();

export const gettransactionidArgsSchema = z.object({});

export const gettransactionidReturnsSchema = z.unknown();

export const gidxInArgsSchema = z.object({
  "": z.unknown(),
});

export const gidxInReturnsSchema = z.unknown();

export const gidxOutArgsSchema = z.object({
  "": z.unknown(),
});

export const gidxOutReturnsSchema = z.unknown();

export const jsonArgsSchema = z.object({
  "": z.unknown(),
});

export const jsonReturnsSchema = jsonSchema;

export const jsonbArgsSchema = z.object({
  "": z.unknown(),
});

export const jsonbReturnsSchema = jsonSchema;

export const longtransactionsenabledArgsSchema = z.object({});

export const longtransactionsenabledReturnsSchema = z.boolean();

export const pathArgsSchema = z.object({
  "": z.unknown(),
});

export const pathReturnsSchema = z.unknown();

export const pgisAsflatgeobufFinalfnArgsSchema = z.object({
  "": z.unknown(),
});

export const pgisAsflatgeobufFinalfnReturnsSchema = z.string();

export const pgisAsgeobufFinalfnArgsSchema = z.object({
  "": z.unknown(),
});

export const pgisAsgeobufFinalfnReturnsSchema = z.string();

export const pgisAsmvtFinalfnArgsSchema = z.object({
  "": z.unknown(),
});

export const pgisAsmvtFinalfnReturnsSchema = z.string();

export const pgisAsmvtSerialfnArgsSchema = z.object({
  "": z.unknown(),
});

export const pgisAsmvtSerialfnReturnsSchema = z.string();

export const pgisGeometryClusterintersectingFinalfnArgsSchema = z.object({
  "": z.unknown(),
});

export const pgisGeometryClusterintersectingFinalfnReturnsSchema = z.array(
  z.unknown(),
);

export const pgisGeometryClusterwithinFinalfnArgsSchema = z.object({
  "": z.unknown(),
});

export const pgisGeometryClusterwithinFinalfnReturnsSchema = z.array(
  z.unknown(),
);

export const pgisGeometryCollectFinalfnArgsSchema = z.object({
  "": z.unknown(),
});

export const pgisGeometryCollectFinalfnReturnsSchema = z.unknown();

export const pgisGeometryMakelineFinalfnArgsSchema = z.object({
  "": z.unknown(),
});

export const pgisGeometryMakelineFinalfnReturnsSchema = z.unknown();

export const pgisGeometryPolygonizeFinalfnArgsSchema = z.object({
  "": z.unknown(),
});

export const pgisGeometryPolygonizeFinalfnReturnsSchema = z.unknown();

export const pgisGeometryUnionParallelFinalfnArgsSchema = z.object({
  "": z.unknown(),
});

export const pgisGeometryUnionParallelFinalfnReturnsSchema = z.unknown();

export const pgisGeometryUnionParallelSerialfnArgsSchema = z.object({
  "": z.unknown(),
});

export const pgisGeometryUnionParallelSerialfnReturnsSchema = z.string();

export const pointArgsSchema = z.object({
  "": z.unknown(),
});

export const pointReturnsSchema = z.unknown();

export const polygonArgsSchema = z.object({
  "": z.unknown(),
});

export const polygonReturnsSchema = z.unknown();

export const populateGeometryColumnsArgsSchema = z.union([
  z.object({
    tbl_oid: z.unknown(),
    use_typmod: z.boolean().optional(),
  }),
  z.object({
    use_typmod: z.boolean().optional(),
  }),
]);

export const populateGeometryColumnsReturnsSchema = z.string();

export const postgisAddbboxArgsSchema = z.object({
  "": z.unknown(),
});

export const postgisAddbboxReturnsSchema = z.unknown();

export const postgisConstraintDimsArgsSchema = z.object({
  geomschema: z.string(),
  geomtable: z.string(),
  geomcolumn: z.string(),
});

export const postgisConstraintDimsReturnsSchema = z.number();

export const postgisConstraintSridArgsSchema = z.object({
  geomschema: z.string(),
  geomtable: z.string(),
  geomcolumn: z.string(),
});

export const postgisConstraintSridReturnsSchema = z.number();

export const postgisConstraintTypeArgsSchema = z.object({
  geomschema: z.string(),
  geomtable: z.string(),
  geomcolumn: z.string(),
});

export const postgisConstraintTypeReturnsSchema = z.string();

export const postgisDropbboxArgsSchema = z.object({
  "": z.unknown(),
});

export const postgisDropbboxReturnsSchema = z.unknown();

export const postgisExtensionsUpgradeArgsSchema = z.object({});

export const postgisExtensionsUpgradeReturnsSchema = z.string();

export const postgisFullVersionArgsSchema = z.object({});

export const postgisFullVersionReturnsSchema = z.string();

export const postgisGeosNoopArgsSchema = z.object({
  "": z.unknown(),
});

export const postgisGeosNoopReturnsSchema = z.unknown();

export const postgisGeosVersionArgsSchema = z.object({});

export const postgisGeosVersionReturnsSchema = z.string();

export const postgisGetbboxArgsSchema = z.object({
  "": z.unknown(),
});

export const postgisGetbboxReturnsSchema = z.unknown();

export const postgisHasbboxArgsSchema = z.object({
  "": z.unknown(),
});

export const postgisHasbboxReturnsSchema = z.boolean();

export const postgisIndexSupportfnArgsSchema = z.object({
  "": z.unknown(),
});

export const postgisIndexSupportfnReturnsSchema = z.unknown();

export const postgisLibBuildDateArgsSchema = z.object({});

export const postgisLibBuildDateReturnsSchema = z.string();

export const postgisLibRevisionArgsSchema = z.object({});

export const postgisLibRevisionReturnsSchema = z.string();

export const postgisLibVersionArgsSchema = z.object({});

export const postgisLibVersionReturnsSchema = z.string();

export const postgisLibjsonVersionArgsSchema = z.object({});

export const postgisLibjsonVersionReturnsSchema = z.string();

export const postgisLiblwgeomVersionArgsSchema = z.object({});

export const postgisLiblwgeomVersionReturnsSchema = z.string();

export const postgisLibprotobufVersionArgsSchema = z.object({});

export const postgisLibprotobufVersionReturnsSchema = z.string();

export const postgisLibxmlVersionArgsSchema = z.object({});

export const postgisLibxmlVersionReturnsSchema = z.string();

export const postgisNoopArgsSchema = z.object({
  "": z.unknown(),
});

export const postgisNoopReturnsSchema = z.unknown();

export const postgisProjVersionArgsSchema = z.object({});

export const postgisProjVersionReturnsSchema = z.string();

export const postgisScriptsBuildDateArgsSchema = z.object({});

export const postgisScriptsBuildDateReturnsSchema = z.string();

export const postgisScriptsInstalledArgsSchema = z.object({});

export const postgisScriptsInstalledReturnsSchema = z.string();

export const postgisScriptsReleasedArgsSchema = z.object({});

export const postgisScriptsReleasedReturnsSchema = z.string();

export const postgisSvnVersionArgsSchema = z.object({});

export const postgisSvnVersionReturnsSchema = z.string();

export const postgisTypeNameArgsSchema = z.object({
  coord_dimension: z.number(),
  geomname: z.string(),
  use_new_name: z.boolean().optional(),
});

export const postgisTypeNameReturnsSchema = z.string();

export const postgisTypmodDimsArgsSchema = z.object({
  "": z.number(),
});

export const postgisTypmodDimsReturnsSchema = z.number();

export const postgisTypmodSridArgsSchema = z.object({
  "": z.number(),
});

export const postgisTypmodSridReturnsSchema = z.number();

export const postgisTypmodTypeArgsSchema = z.object({
  "": z.number(),
});

export const postgisTypmodTypeReturnsSchema = z.string();

export const postgisVersionArgsSchema = z.object({});

export const postgisVersionReturnsSchema = z.string();

export const postgisWagyuVersionArgsSchema = z.object({});

export const postgisWagyuVersionReturnsSchema = z.string();

export const spheroidInArgsSchema = z.object({
  "": z.unknown(),
});

export const spheroidInReturnsSchema = z.unknown();

export const spheroidOutArgsSchema = z.object({
  "": z.unknown(),
});

export const spheroidOutReturnsSchema = z.unknown();

export const st3dclosestpointArgsSchema = z.object({
  geom2: z.unknown(),
  geom1: z.unknown(),
});

export const st3dclosestpointReturnsSchema = z.unknown();

export const st3ddistanceArgsSchema = z.object({
  geom1: z.unknown(),
  geom2: z.unknown(),
});

export const st3ddistanceReturnsSchema = z.number();

export const st3dlengthArgsSchema = z.object({
  "": z.unknown(),
});

export const st3dlengthReturnsSchema = z.number();

export const st3dlongestlineArgsSchema = z.object({
  geom2: z.unknown(),
  geom1: z.unknown(),
});

export const st3dlongestlineReturnsSchema = z.unknown();

export const st3dmakeboxArgsSchema = z.object({
  geom2: z.unknown(),
  geom1: z.unknown(),
});

export const st3dmakeboxReturnsSchema = z.unknown();

export const st3dmaxdistanceArgsSchema = z.object({
  geom2: z.unknown(),
  geom1: z.unknown(),
});

export const st3dmaxdistanceReturnsSchema = z.number();

export const st3dperimeterArgsSchema = z.object({
  "": z.unknown(),
});

export const st3dperimeterReturnsSchema = z.number();

export const st3dshortestlineArgsSchema = z.object({
  geom2: z.unknown(),
  geom1: z.unknown(),
});

export const st3dshortestlineReturnsSchema = z.unknown();

export const stAddpointArgsSchema = z.object({
  geom1: z.unknown(),
  geom2: z.unknown(),
});

export const stAddpointReturnsSchema = z.unknown();

export const stAngleArgsSchema = z.union([
  z.object({
    line1: z.unknown(),
    line2: z.unknown(),
  }),
  z.object({
    pt2: z.unknown(),
    pt3: z.unknown(),
    pt4: z.unknown().optional(),
    pt1: z.unknown(),
  }),
]);

export const stAngleReturnsSchema = z.number();

export const stAreaArgsSchema = z.union([
  z.object({
    "": z.string(),
  }),
  z.object({
    "": z.unknown(),
  }),
  z.object({
    geog: z.unknown(),
    use_spheroid: z.boolean().optional(),
  }),
]);

export const stAreaReturnsSchema = z.number();

export const stArea2dArgsSchema = z.object({
  "": z.unknown(),
});

export const stArea2dReturnsSchema = z.number();

export const stAsbinaryArgsSchema = z.union([
  z.object({
    "": z.unknown(),
  }),
  z.object({
    "": z.unknown(),
  }),
]);

export const stAsbinaryReturnsSchema = z.string();

export const stAsencodedpolylineArgsSchema = z.object({
  geom: z.unknown(),
  nprecision: z.number().optional(),
});

export const stAsencodedpolylineReturnsSchema = z.string();

export const stAsewkbArgsSchema = z.object({
  "": z.unknown(),
});

export const stAsewkbReturnsSchema = z.string();

export const stAsewktArgsSchema = z.union([
  z.object({
    "": z.string(),
  }),
  z.object({
    "": z.unknown(),
  }),
  z.object({
    "": z.unknown(),
  }),
]);

export const stAsewktReturnsSchema = z.string();

export const stAsgeojsonArgsSchema = z.union([
  z.object({
    "": z.string(),
  }),
  z.object({
    geog: z.unknown(),
    maxdecimaldigits: z.number().optional(),
    options: z.number().optional(),
  }),
  z.object({
    geom: z.unknown(),
    maxdecimaldigits: z.number().optional(),
    options: z.number().optional(),
  }),
  z.object({
    r: z.record(z.unknown()),
    geom_column: z.string().optional(),
    maxdecimaldigits: z.number().optional(),
    pretty_bool: z.boolean().optional(),
  }),
]);

export const stAsgeojsonReturnsSchema = z.string();

export const stAsgmlArgsSchema = z.union([
  z.object({
    "": z.string(),
  }),
  z.object({
    geog: z.unknown(),
    maxdecimaldigits: z.number().optional(),
    options: z.number().optional(),
    nprefix: z.string().optional(),
    id: z.string().optional(),
  }),
  z.object({
    geom: z.unknown(),
    maxdecimaldigits: z.number().optional(),
    options: z.number().optional(),
  }),
  z.object({
    version: z.number(),
    geog: z.unknown(),
    maxdecimaldigits: z.number().optional(),
    options: z.number().optional(),
    nprefix: z.string().optional(),
    id: z.string().optional(),
  }),
  z.object({
    version: z.number(),
    geom: z.unknown(),
    maxdecimaldigits: z.number().optional(),
    options: z.number().optional(),
    nprefix: z.string().optional(),
    id: z.string().optional(),
  }),
]);

export const stAsgmlReturnsSchema = z.string();

export const stAshexewkbArgsSchema = z.object({
  "": z.unknown(),
});

export const stAshexewkbReturnsSchema = z.string();

export const stAskmlArgsSchema = z.union([
  z.object({
    "": z.string(),
  }),
  z.object({
    geog: z.unknown(),
    maxdecimaldigits: z.number().optional(),
    nprefix: z.string().optional(),
  }),
  z.object({
    geom: z.unknown(),
    maxdecimaldigits: z.number().optional(),
    nprefix: z.string().optional(),
  }),
]);

export const stAskmlReturnsSchema = z.string();

export const stAslatlontextArgsSchema = z.object({
  tmpl: z.string().optional(),
  geom: z.unknown(),
});

export const stAslatlontextReturnsSchema = z.string();

export const stAsmarc21ArgsSchema = z.object({
  geom: z.unknown(),
  format: z.string().optional(),
});

export const stAsmarc21ReturnsSchema = z.string();

export const stAsmvtgeomArgsSchema = z.object({
  geom: z.unknown(),
  bounds: z.unknown(),
  extent: z.number().optional(),
  buffer: z.number().optional(),
  clip_geom: z.boolean().optional(),
});

export const stAsmvtgeomReturnsSchema = z.unknown();

export const stAssvgArgsSchema = z.union([
  z.object({
    "": z.string(),
  }),
  z.object({
    geog: z.unknown(),
    rel: z.number().optional(),
    maxdecimaldigits: z.number().optional(),
  }),
  z.object({
    geom: z.unknown(),
    rel: z.number().optional(),
    maxdecimaldigits: z.number().optional(),
  }),
]);

export const stAssvgReturnsSchema = z.string();

export const stAstextArgsSchema = z.union([
  z.object({
    "": z.string(),
  }),
  z.object({
    "": z.unknown(),
  }),
  z.object({
    "": z.unknown(),
  }),
]);

export const stAstextReturnsSchema = z.string();

export const stAstwkbArgsSchema = z.union([
  z.object({
    prec: z.number().optional(),
    with_boxes: z.boolean().optional(),
    with_sizes: z.boolean().optional(),
    prec_m: z.number().optional(),
    geom: z.array(z.unknown()),
    ids: z.array(z.number()),
    prec_z: z.number().optional(),
  }),
  z.object({
    prec_z: z.number().optional(),
    prec: z.number().optional(),
    geom: z.unknown(),
    with_sizes: z.boolean().optional(),
    with_boxes: z.boolean().optional(),
    prec_m: z.number().optional(),
  }),
]);

export const stAstwkbReturnsSchema = z.string();

export const stAsx3dArgsSchema = z.object({
  options: z.number().optional(),
  geom: z.unknown(),
  maxdecimaldigits: z.number().optional(),
});

export const stAsx3dReturnsSchema = z.string();

export const stAzimuthArgsSchema = z.union([
  z.object({
    geog1: z.unknown(),
    geog2: z.unknown(),
  }),
  z.object({
    geom2: z.unknown(),
    geom1: z.unknown(),
  }),
]);

export const stAzimuthReturnsSchema = z.number();

export const stBoundaryArgsSchema = z.object({
  "": z.unknown(),
});

export const stBoundaryReturnsSchema = z.unknown();

export const stBoundingdiagonalArgsSchema = z.object({
  geom: z.unknown(),
  fits: z.boolean().optional(),
});

export const stBoundingdiagonalReturnsSchema = z.unknown();

export const stBufferArgsSchema = z.union([
  z.object({
    geom: z.unknown(),
    radius: z.number(),
    quadsegs: z.number(),
  }),
  z.object({
    radius: z.number(),
    geom: z.unknown(),
    options: z.string().optional(),
  }),
]);

export const stBufferReturnsSchema = z.unknown();

export const stBuildareaArgsSchema = z.object({
  "": z.unknown(),
});

export const stBuildareaReturnsSchema = z.unknown();

export const stCentroidArgsSchema = z.union([
  z.object({
    "": z.string(),
  }),
  z.object({
    "": z.unknown(),
  }),
]);

export const stCentroidReturnsSchema = z.unknown();

export const stCleangeometryArgsSchema = z.object({
  "": z.unknown(),
});

export const stCleangeometryReturnsSchema = z.unknown();

export const stClipbybox2dArgsSchema = z.object({
  geom: z.unknown(),
  box: z.unknown(),
});

export const stClipbybox2dReturnsSchema = z.unknown();

export const stClosestpointArgsSchema = z.object({
  geom1: z.unknown(),
  geom2: z.unknown(),
});

export const stClosestpointReturnsSchema = z.unknown();

export const stClusterintersectingArgsSchema = z.object({
  "": z.array(z.unknown()),
});

export const stClusterintersectingReturnsSchema = z.array(z.unknown());

export const stCollectArgsSchema = z.union([
  z.object({
    "": z.array(z.unknown()),
  }),
  z.object({
    geom2: z.unknown(),
    geom1: z.unknown(),
  }),
]);

export const stCollectReturnsSchema = z.unknown();

export const stCollectionextractArgsSchema = z.object({
  "": z.unknown(),
});

export const stCollectionextractReturnsSchema = z.unknown();

export const stCollectionhomogenizeArgsSchema = z.object({
  "": z.unknown(),
});

export const stCollectionhomogenizeReturnsSchema = z.unknown();

export const stConcavehullArgsSchema = z.object({
  param_pctconvex: z.number(),
  param_geom: z.unknown(),
  param_allow_holes: z.boolean().optional(),
});

export const stConcavehullReturnsSchema = z.unknown();

export const stConvexhullArgsSchema = z.object({
  "": z.unknown(),
});

export const stConvexhullReturnsSchema = z.unknown();

export const stCoorddimArgsSchema = z.object({
  geometry: z.unknown(),
});

export const stCoorddimReturnsSchema = z.number();

export const stCurvetolineArgsSchema = z.object({
  geom: z.unknown(),
  tol: z.number().optional(),
  toltype: z.number().optional(),
  flags: z.number().optional(),
});

export const stCurvetolineReturnsSchema = z.unknown();

export const stDelaunaytrianglesArgsSchema = z.object({
  flags: z.number().optional(),
  tolerance: z.number().optional(),
  g1: z.unknown(),
});

export const stDelaunaytrianglesReturnsSchema = z.unknown();

export const stDifferenceArgsSchema = z.object({
  gridsize: z.number().optional(),
  geom1: z.unknown(),
  geom2: z.unknown(),
});

export const stDifferenceReturnsSchema = z.unknown();

export const stDimensionArgsSchema = z.object({
  "": z.unknown(),
});

export const stDimensionReturnsSchema = z.number();

export const stDisjointArgsSchema = z.object({
  geom1: z.unknown(),
  geom2: z.unknown(),
});

export const stDisjointReturnsSchema = z.boolean();

export const stDistanceArgsSchema = z.union([
  z.object({
    geog1: z.unknown(),
    geog2: z.unknown(),
    use_spheroid: z.boolean().optional(),
  }),
  z.object({
    geom1: z.unknown(),
    geom2: z.unknown(),
  }),
]);

export const stDistanceReturnsSchema = z.number();

export const stDistancesphereArgsSchema = z.union([
  z.object({
    geom1: z.unknown(),
    geom2: z.unknown(),
  }),
  z.object({
    geom1: z.unknown(),
    geom2: z.unknown(),
    radius: z.number(),
  }),
]);

export const stDistancesphereReturnsSchema = z.number();

export const stDistancespheroidArgsSchema = z.object({
  geom2: z.unknown(),
  geom1: z.unknown(),
});

export const stDistancespheroidReturnsSchema = z.number();

export const stDumpArgsSchema = z.object({
  "": z.unknown(),
});

export const gisGeometryDumpSchema = z.object({
  path: z.array(z.number()).nullable(),
  geom: z.unknown().nullable(),
});

export const stDumppointsArgsSchema = z.object({
  "": z.unknown(),
});

export const stDumppointsReturnsSchema = z.array(gisGeometryDumpSchema);

export const stDumpringsArgsSchema = z.object({
  "": z.unknown(),
});

export const stDumpringsReturnsSchema = z.array(gisGeometryDumpSchema);

export const stDumpsegmentsArgsSchema = z.object({
  "": z.unknown(),
});

export const stDumpsegmentsReturnsSchema = z.array(gisGeometryDumpSchema);

export const stEndpointArgsSchema = z.object({
  "": z.unknown(),
});

export const stEndpointReturnsSchema = z.unknown();

export const stEnvelopeArgsSchema = z.object({
  "": z.unknown(),
});

export const stEnvelopeReturnsSchema = z.unknown();

export const stExpandArgsSchema = z.union([
  z.object({
    box: z.unknown(),
    dx: z.number(),
    dy: z.number(),
    dz: z.number().optional(),
  }),
  z.object({
    dy: z.number(),
    dx: z.number(),
    box: z.unknown(),
  }),
  z.object({
    geom: z.unknown(),
    dy: z.number(),
    dz: z.number().optional(),
    dm: z.number().optional(),
    dx: z.number(),
  }),
]);

export const stExpandReturnsSchema = z.unknown();

export const stExteriorringArgsSchema = z.object({
  "": z.unknown(),
});

export const stExteriorringReturnsSchema = z.unknown();

export const stFlipcoordinatesArgsSchema = z.object({
  "": z.unknown(),
});

export const stFlipcoordinatesReturnsSchema = z.unknown();

export const stForce2dArgsSchema = z.object({
  "": z.unknown(),
});

export const stForce2dReturnsSchema = z.unknown();

export const stForce3dArgsSchema = z.object({
  geom: z.unknown(),
  zvalue: z.number().optional(),
});

export const stForce3dReturnsSchema = z.unknown();

export const stForce3dmArgsSchema = z.object({
  geom: z.unknown(),
  mvalue: z.number().optional(),
});

export const stForce3dmReturnsSchema = z.unknown();

export const stForce3dzArgsSchema = z.object({
  zvalue: z.number().optional(),
  geom: z.unknown(),
});

export const stForce3dzReturnsSchema = z.unknown();

export const stForce4dArgsSchema = z.object({
  mvalue: z.number().optional(),
  zvalue: z.number().optional(),
  geom: z.unknown(),
});

export const stForce4dReturnsSchema = z.unknown();

export const stForcecollectionArgsSchema = z.object({
  "": z.unknown(),
});

export const stForcecollectionReturnsSchema = z.unknown();

export const stForcecurveArgsSchema = z.object({
  "": z.unknown(),
});

export const stForcecurveReturnsSchema = z.unknown();

export const stForcepolygonccwArgsSchema = z.object({
  "": z.unknown(),
});

export const stForcepolygonccwReturnsSchema = z.unknown();

export const stForcepolygoncwArgsSchema = z.object({
  "": z.unknown(),
});

export const stForcepolygoncwReturnsSchema = z.unknown();

export const stForcerhrArgsSchema = z.object({
  "": z.unknown(),
});

export const stForcerhrReturnsSchema = z.unknown();

export const stForcesfsArgsSchema = z.object({
  "": z.unknown(),
});

export const stForcesfsReturnsSchema = z.unknown();

export const stGeneratepointsArgsSchema = z.union([
  z.object({
    npoints: z.number(),
    area: z.unknown(),
  }),
  z.object({
    npoints: z.number(),
    area: z.unknown(),
    seed: z.number(),
  }),
]);

export const stGeneratepointsReturnsSchema = z.unknown();

export const stGeogfromtextArgsSchema = z.object({
  "": z.string(),
});

export const stGeogfromtextReturnsSchema = z.unknown();

export const stGeogfromwkbArgsSchema = z.object({
  "": z.string(),
});

export const stGeogfromwkbReturnsSchema = z.unknown();

export const stGeographyfromtextArgsSchema = z.object({
  "": z.string(),
});

export const stGeographyfromtextReturnsSchema = z.unknown();

export const stGeohashArgsSchema = z.union([
  z.object({
    geog: z.unknown(),
    maxchars: z.number().optional(),
  }),
  z.object({
    geom: z.unknown(),
    maxchars: z.number().optional(),
  }),
]);

export const stGeohashReturnsSchema = z.string();

export const stGeomcollfromtextArgsSchema = z.object({
  "": z.string(),
});

export const stGeomcollfromtextReturnsSchema = z.unknown();

export const stGeomcollfromwkbArgsSchema = z.object({
  "": z.string(),
});

export const stGeomcollfromwkbReturnsSchema = z.unknown();

export const stGeometricmedianArgsSchema = z.object({
  g: z.unknown(),
  tolerance: z.number().optional(),
  max_iter: z.number().optional(),
  fail_if_not_converged: z.boolean().optional(),
});

export const stGeometricmedianReturnsSchema = z.unknown();

export const stGeometryfromtextArgsSchema = z.object({
  "": z.string(),
});

export const stGeometryfromtextReturnsSchema = z.unknown();

export const stGeometrytypeArgsSchema = z.object({
  "": z.unknown(),
});

export const stGeometrytypeReturnsSchema = z.string();

export const stGeomfromewkbArgsSchema = z.object({
  "": z.string(),
});

export const stGeomfromewkbReturnsSchema = z.unknown();

export const stGeomfromewktArgsSchema = z.object({
  "": z.string(),
});

export const stGeomfromewktReturnsSchema = z.unknown();

export const stGeomfromgeojsonArgsSchema = z.union([
  z.object({
    "": jsonSchema,
  }),
  z.object({
    "": jsonSchema,
  }),
  z.object({
    "": z.string(),
  }),
]);

export const stGeomfromgeojsonReturnsSchema = z.unknown();

export const stGeomfromgmlArgsSchema = z.object({
  "": z.string(),
});

export const stGeomfromgmlReturnsSchema = z.unknown();

export const stGeomfromkmlArgsSchema = z.object({
  "": z.string(),
});

export const stGeomfromkmlReturnsSchema = z.unknown();

export const stGeomfrommarc21ArgsSchema = z.object({
  marc21xml: z.string(),
});

export const stGeomfrommarc21ReturnsSchema = z.unknown();

export const stGeomfromtextArgsSchema = z.object({
  "": z.string(),
});

export const stGeomfromtextReturnsSchema = z.unknown();

export const stGeomfromtwkbArgsSchema = z.object({
  "": z.string(),
});

export const stGeomfromtwkbReturnsSchema = z.unknown();

export const stGeomfromwkbArgsSchema = z.object({
  "": z.string(),
});

export const stGeomfromwkbReturnsSchema = z.unknown();

export const stGmltosqlArgsSchema = z.object({
  "": z.string(),
});

export const stGmltosqlReturnsSchema = z.unknown();

export const stHasarcArgsSchema = z.object({
  geometry: z.unknown(),
});

export const stHasarcReturnsSchema = z.boolean();

export const stHausdorffdistanceArgsSchema = z.object({
  geom1: z.unknown(),
  geom2: z.unknown(),
});

export const stHausdorffdistanceReturnsSchema = z.number();

export const stHexagonArgsSchema = z.object({
  cell_j: z.number(),
  origin: z.unknown().optional(),
  size: z.number(),
  cell_i: z.number(),
});

export const stHexagonReturnsSchema = z.unknown();

export const stHexagongridArgsSchema = z.object({
  size: z.number(),
  bounds: z.unknown(),
});

export const stHexagongridReturnsSchema = z.array(z.record(z.unknown()));

export const stInterpolatepointArgsSchema = z.object({
  point: z.unknown(),
  line: z.unknown(),
});

export const stInterpolatepointReturnsSchema = z.number();

export const stIntersectionArgsSchema = z.object({
  geom2: z.unknown(),
  geom1: z.unknown(),
  gridsize: z.number().optional(),
});

export const stIntersectionReturnsSchema = z.unknown();

export const stIsclosedArgsSchema = z.object({
  "": z.unknown(),
});

export const stIsclosedReturnsSchema = z.boolean();

export const stIscollectionArgsSchema = z.object({
  "": z.unknown(),
});

export const stIscollectionReturnsSchema = z.boolean();

export const stIsemptyArgsSchema = z.object({
  "": z.unknown(),
});

export const stIsemptyReturnsSchema = z.boolean();

export const stIspolygonccwArgsSchema = z.object({
  "": z.unknown(),
});

export const stIspolygonccwReturnsSchema = z.boolean();

export const stIspolygoncwArgsSchema = z.object({
  "": z.unknown(),
});

export const stIspolygoncwReturnsSchema = z.boolean();

export const stIsringArgsSchema = z.object({
  "": z.unknown(),
});

export const stIsringReturnsSchema = z.boolean();

export const stIssimpleArgsSchema = z.object({
  "": z.unknown(),
});

export const stIssimpleReturnsSchema = z.boolean();

export const stIsvalidArgsSchema = z.object({
  "": z.unknown(),
});

export const stIsvalidReturnsSchema = z.boolean();

export const stIsvaliddetailArgsSchema = z.object({
  flags: z.number().optional(),
  geom: z.unknown(),
});

export const gisValidDetailSchema = z.object({
  valid: z.boolean().nullable(),
  reason: z.string().nullable(),
  location: z.unknown().nullable(),
});

export const stIsvalidreasonArgsSchema = z.object({
  "": z.unknown(),
});

export const stIsvalidreasonReturnsSchema = z.string();

export const stIsvalidtrajectoryArgsSchema = z.object({
  "": z.unknown(),
});

export const stIsvalidtrajectoryReturnsSchema = z.boolean();

export const stLengthArgsSchema = z.union([
  z.object({
    "": z.string(),
  }),
  z.object({
    "": z.unknown(),
  }),
  z.object({
    geog: z.unknown(),
    use_spheroid: z.boolean().optional(),
  }),
]);

export const stLengthReturnsSchema = z.number();

export const stLength2dArgsSchema = z.object({
  "": z.unknown(),
});

export const stLength2dReturnsSchema = z.number();

export const stLettersArgsSchema = z.object({
  letters: z.string(),
  font: jsonSchema.optional(),
});

export const stLettersReturnsSchema = z.unknown();

export const stLinefromencodedpolylineArgsSchema = z.object({
  txtin: z.string(),
  nprecision: z.number().optional(),
});

export const stLinefromencodedpolylineReturnsSchema = z.unknown();

export const stLinefrommultipointArgsSchema = z.object({
  "": z.unknown(),
});

export const stLinefrommultipointReturnsSchema = z.unknown();

export const stLinefromtextArgsSchema = z.object({
  "": z.string(),
});

export const stLinefromtextReturnsSchema = z.unknown();

export const stLinefromwkbArgsSchema = z.object({
  "": z.string(),
});

export const stLinefromwkbReturnsSchema = z.unknown();

export const stLinelocatepointArgsSchema = z.object({
  geom1: z.unknown(),
  geom2: z.unknown(),
});

export const stLinelocatepointReturnsSchema = z.number();

export const stLinemergeArgsSchema = z.object({
  "": z.unknown(),
});

export const stLinemergeReturnsSchema = z.unknown();

export const stLinestringfromwkbArgsSchema = z.object({
  "": z.string(),
});

export const stLinestringfromwkbReturnsSchema = z.unknown();

export const stLinetocurveArgsSchema = z.object({
  geometry: z.unknown(),
});

export const stLinetocurveReturnsSchema = z.unknown();

export const stLocatealongArgsSchema = z.object({
  leftrightoffset: z.number().optional(),
  geometry: z.unknown(),
  measure: z.number(),
});

export const stLocatealongReturnsSchema = z.unknown();

export const stLocatebetweenArgsSchema = z.object({
  frommeasure: z.number(),
  geometry: z.unknown(),
  tomeasure: z.number(),
  leftrightoffset: z.number().optional(),
});

export const stLocatebetweenReturnsSchema = z.unknown();

export const stLocatebetweenelevationsArgsSchema = z.object({
  toelevation: z.number(),
  fromelevation: z.number(),
  geometry: z.unknown(),
});

export const stLocatebetweenelevationsReturnsSchema = z.unknown();

export const stMArgsSchema = z.object({
  "": z.unknown(),
});

export const stMReturnsSchema = z.number();

export const stMakebox2dArgsSchema = z.object({
  geom2: z.unknown(),
  geom1: z.unknown(),
});

export const stMakebox2dReturnsSchema = z.unknown();

export const stMakelineArgsSchema = z.union([
  z.object({
    "": z.array(z.unknown()),
  }),
  z.object({
    geom1: z.unknown(),
    geom2: z.unknown(),
  }),
]);

export const stMakelineReturnsSchema = z.unknown();

export const stMakepolygonArgsSchema = z.object({
  "": z.unknown(),
});

export const stMakepolygonReturnsSchema = z.unknown();

export const stMakevalidArgsSchema = z.union([
  z.object({
    "": z.unknown(),
  }),
  z.object({
    params: z.string(),
    geom: z.unknown(),
  }),
]);

export const stMakevalidReturnsSchema = z.unknown();

export const stMaximuminscribedcircleArgsSchema = z.object({
  "": z.unknown(),
});

export const stMaximuminscribedcircleReturnsSchema = z.record(z.unknown());

export const stMemsizeArgsSchema = z.object({
  "": z.unknown(),
});

export const stMemsizeReturnsSchema = z.number();

export const stMinimumboundingcircleArgsSchema = z.object({
  inputgeom: z.unknown(),
  segs_per_quarter: z.number().optional(),
});

export const stMinimumboundingcircleReturnsSchema = z.unknown();

export const stMinimumboundingradiusArgsSchema = z.object({
  "": z.unknown(),
});

export const stMinimumboundingradiusReturnsSchema = z.record(z.unknown());

export const stMinimumclearanceArgsSchema = z.object({
  "": z.unknown(),
});

export const stMinimumclearanceReturnsSchema = z.number();

export const stMinimumclearancelineArgsSchema = z.object({
  "": z.unknown(),
});

export const stMinimumclearancelineReturnsSchema = z.unknown();

export const stMlinefromtextArgsSchema = z.object({
  "": z.string(),
});

export const stMlinefromtextReturnsSchema = z.unknown();

export const stMlinefromwkbArgsSchema = z.object({
  "": z.string(),
});

export const stMlinefromwkbReturnsSchema = z.unknown();

export const stMpointfromtextArgsSchema = z.object({
  "": z.string(),
});

export const stMpointfromtextReturnsSchema = z.unknown();

export const stMpointfromwkbArgsSchema = z.object({
  "": z.string(),
});

export const stMpointfromwkbReturnsSchema = z.unknown();

export const stMpolyfromtextArgsSchema = z.object({
  "": z.string(),
});

export const stMpolyfromtextReturnsSchema = z.unknown();

export const stMpolyfromwkbArgsSchema = z.object({
  "": z.string(),
});

export const stMpolyfromwkbReturnsSchema = z.unknown();

export const stMultiArgsSchema = z.object({
  "": z.unknown(),
});

export const stMultiReturnsSchema = z.unknown();

export const stMultilinefromwkbArgsSchema = z.object({
  "": z.string(),
});

export const stMultilinefromwkbReturnsSchema = z.unknown();

export const stMultilinestringfromtextArgsSchema = z.object({
  "": z.string(),
});

export const stMultilinestringfromtextReturnsSchema = z.unknown();

export const stMultipointfromtextArgsSchema = z.object({
  "": z.string(),
});

export const stMultipointfromtextReturnsSchema = z.unknown();

export const stMultipointfromwkbArgsSchema = z.object({
  "": z.string(),
});

export const stMultipointfromwkbReturnsSchema = z.unknown();

export const stMultipolyfromwkbArgsSchema = z.object({
  "": z.string(),
});

export const stMultipolyfromwkbReturnsSchema = z.unknown();

export const stMultipolygonfromtextArgsSchema = z.object({
  "": z.string(),
});

export const stMultipolygonfromtextReturnsSchema = z.unknown();

export const stNdimsArgsSchema = z.object({
  "": z.unknown(),
});

export const stNdimsReturnsSchema = z.number();

export const stNodeArgsSchema = z.object({
  g: z.unknown(),
});

export const stNodeReturnsSchema = z.unknown();

export const stNormalizeArgsSchema = z.object({
  geom: z.unknown(),
});

export const stNormalizeReturnsSchema = z.unknown();

export const stNpointsArgsSchema = z.object({
  "": z.unknown(),
});

export const stNpointsReturnsSchema = z.number();

export const stNringsArgsSchema = z.object({
  "": z.unknown(),
});

export const stNringsReturnsSchema = z.number();

export const stNumgeometriesArgsSchema = z.object({
  "": z.unknown(),
});

export const stNumgeometriesReturnsSchema = z.number();

export const stNuminteriorringArgsSchema = z.object({
  "": z.unknown(),
});

export const stNuminteriorringReturnsSchema = z.number();

export const stNuminteriorringsArgsSchema = z.object({
  "": z.unknown(),
});

export const stNuminteriorringsReturnsSchema = z.number();

export const stNumpatchesArgsSchema = z.object({
  "": z.unknown(),
});

export const stNumpatchesReturnsSchema = z.number();

export const stNumpointsArgsSchema = z.object({
  "": z.unknown(),
});

export const stNumpointsReturnsSchema = z.number();

export const stOffsetcurveArgsSchema = z.object({
  distance: z.number(),
  params: z.string().optional(),
  line: z.unknown(),
});

export const stOffsetcurveReturnsSchema = z.unknown();

export const stOrientedenvelopeArgsSchema = z.object({
  "": z.unknown(),
});

export const stOrientedenvelopeReturnsSchema = z.unknown();

export const stPerimeterArgsSchema = z.union([
  z.object({
    "": z.unknown(),
  }),
  z.object({
    geog: z.unknown(),
    use_spheroid: z.boolean().optional(),
  }),
]);

export const stPerimeterReturnsSchema = z.number();

export const stPerimeter2dArgsSchema = z.object({
  "": z.unknown(),
});

export const stPerimeter2dReturnsSchema = z.number();

export const stPointfromtextArgsSchema = z.object({
  "": z.string(),
});

export const stPointfromtextReturnsSchema = z.unknown();

export const stPointfromwkbArgsSchema = z.object({
  "": z.string(),
});

export const stPointfromwkbReturnsSchema = z.unknown();

export const stPointmArgsSchema = z.object({
  xcoordinate: z.number(),
  ycoordinate: z.number(),
  mcoordinate: z.number(),
  srid: z.number().optional(),
});

export const stPointmReturnsSchema = z.unknown();

export const stPointonsurfaceArgsSchema = z.object({
  "": z.unknown(),
});

export const stPointonsurfaceReturnsSchema = z.unknown();

export const stPointsArgsSchema = z.object({
  "": z.unknown(),
});

export const stPointsReturnsSchema = z.unknown();

export const stPointzArgsSchema = z.object({
  srid: z.number().optional(),
  xcoordinate: z.number(),
  ycoordinate: z.number(),
  zcoordinate: z.number(),
});

export const stPointzReturnsSchema = z.unknown();

export const stPointzmArgsSchema = z.object({
  mcoordinate: z.number(),
  ycoordinate: z.number(),
  zcoordinate: z.number(),
  srid: z.number().optional(),
  xcoordinate: z.number(),
});

export const stPointzmReturnsSchema = z.unknown();

export const stPolyfromtextArgsSchema = z.object({
  "": z.string(),
});

export const stPolyfromtextReturnsSchema = z.unknown();

export const stPolyfromwkbArgsSchema = z.object({
  "": z.string(),
});

export const stPolyfromwkbReturnsSchema = z.unknown();

export const stPolygonfromtextArgsSchema = z.object({
  "": z.string(),
});

export const stPolygonfromtextReturnsSchema = z.unknown();

export const stPolygonfromwkbArgsSchema = z.object({
  "": z.string(),
});

export const stPolygonfromwkbReturnsSchema = z.unknown();

export const stPolygonizeArgsSchema = z.object({
  "": z.array(z.unknown()),
});

export const stPolygonizeReturnsSchema = z.unknown();

export const stProjectArgsSchema = z.object({
  geog: z.unknown(),
  distance: z.number(),
  azimuth: z.number(),
});

export const stProjectReturnsSchema = z.unknown();

export const stQuantizecoordinatesArgsSchema = z.object({
  prec_x: z.number(),
  prec_m: z.number().optional(),
  prec_z: z.number().optional(),
  prec_y: z.number().optional(),
  g: z.unknown(),
});

export const stQuantizecoordinatesReturnsSchema = z.unknown();

export const stReduceprecisionArgsSchema = z.object({
  geom: z.unknown(),
  gridsize: z.number(),
});

export const stReduceprecisionReturnsSchema = z.unknown();

export const stRelateArgsSchema = z.object({
  geom1: z.unknown(),
  geom2: z.unknown(),
});

export const stRelateReturnsSchema = z.string();

export const stRemoverepeatedpointsArgsSchema = z.object({
  geom: z.unknown(),
  tolerance: z.number().optional(),
});

export const stRemoverepeatedpointsReturnsSchema = z.unknown();

export const stReverseArgsSchema = z.object({
  "": z.unknown(),
});

export const stReverseReturnsSchema = z.unknown();

export const stSegmentizeArgsSchema = z.object({
  geog: z.unknown(),
  max_segment_length: z.number(),
});

export const stSegmentizeReturnsSchema = z.unknown();

export const stSetsridArgsSchema = z.union([
  z.object({
    geom: z.unknown(),
    srid: z.number(),
  }),
  z.object({
    srid: z.number(),
    geog: z.unknown(),
  }),
]);

export const stSetsridReturnsSchema = z.unknown();

export const stSharedpathsArgsSchema = z.object({
  geom2: z.unknown(),
  geom1: z.unknown(),
});

export const stSharedpathsReturnsSchema = z.unknown();

export const stShiftlongitudeArgsSchema = z.object({
  "": z.unknown(),
});

export const stShiftlongitudeReturnsSchema = z.unknown();

export const stShortestlineArgsSchema = z.object({
  geom1: z.unknown(),
  geom2: z.unknown(),
});

export const stShortestlineReturnsSchema = z.unknown();

export const stSimplifypolygonhullArgsSchema = z.object({
  vertex_fraction: z.number(),
  geom: z.unknown(),
  is_outer: z.boolean().optional(),
});

export const stSimplifypolygonhullReturnsSchema = z.unknown();

export const stSplitArgsSchema = z.object({
  geom1: z.unknown(),
  geom2: z.unknown(),
});

export const stSplitReturnsSchema = z.unknown();

export const stSquareArgsSchema = z.object({
  cell_j: z.number(),
  size: z.number(),
  cell_i: z.number(),
  origin: z.unknown().optional(),
});

export const stSquareReturnsSchema = z.unknown();

export const stSquaregridArgsSchema = z.object({
  size: z.number(),
  bounds: z.unknown(),
});

export const stSquaregridReturnsSchema = z.array(z.record(z.unknown()));

export const stSridArgsSchema = z.union([
  z.object({
    geog: z.unknown(),
  }),
  z.object({
    geom: z.unknown(),
  }),
]);

export const stSridReturnsSchema = z.number();

export const stStartpointArgsSchema = z.object({
  "": z.unknown(),
});

export const stStartpointReturnsSchema = z.unknown();

export const stSubdivideArgsSchema = z.object({
  gridsize: z.number().optional(),
  geom: z.unknown(),
  maxvertices: z.number().optional(),
});

export const stSubdivideReturnsSchema = z.array(z.unknown());

export const stSummaryArgsSchema = z.union([
  z.object({
    "": z.unknown(),
  }),
  z.object({
    "": z.unknown(),
  }),
]);

export const stSummaryReturnsSchema = z.string();

export const stSwapordinatesArgsSchema = z.object({
  geom: z.unknown(),
  ords: z.unknown(),
});

export const stSwapordinatesReturnsSchema = z.unknown();

export const stSymdifferenceArgsSchema = z.object({
  gridsize: z.number().optional(),
  geom1: z.unknown(),
  geom2: z.unknown(),
});

export const stSymdifferenceReturnsSchema = z.unknown();

export const stSymmetricdifferenceArgsSchema = z.object({
  geom1: z.unknown(),
  geom2: z.unknown(),
});

export const stSymmetricdifferenceReturnsSchema = z.unknown();

export const stTileenvelopeArgsSchema = z.object({
  zoom: z.number(),
  x: z.number(),
  y: z.number(),
  bounds: z.unknown().optional(),
  margin: z.number().optional(),
});

export const stTileenvelopeReturnsSchema = z.unknown();

export const stTransformArgsSchema = z.union([
  z.object({
    geom: z.unknown(),
    from_proj: z.string(),
    to_proj: z.string(),
  }),
  z.object({
    geom: z.unknown(),
    from_proj: z.string(),
    to_srid: z.number(),
  }),
  z.object({
    geom: z.unknown(),
    to_proj: z.string(),
  }),
]);

export const stTransformReturnsSchema = z.unknown();

export const stTriangulatepolygonArgsSchema = z.object({
  g1: z.unknown(),
});

export const stTriangulatepolygonReturnsSchema = z.unknown();

export const stUnionArgsSchema = z.union([
  z.object({
    "": z.array(z.unknown()),
  }),
  z.object({
    geom1: z.unknown(),
    geom2: z.unknown(),
  }),
  z.object({
    gridsize: z.number(),
    geom1: z.unknown(),
    geom2: z.unknown(),
  }),
]);

export const stUnionReturnsSchema = z.unknown();

export const stVoronoilinesArgsSchema = z.object({
  tolerance: z.number().optional(),
  g1: z.unknown(),
  extend_to: z.unknown().optional(),
});

export const stVoronoilinesReturnsSchema = z.unknown();

export const stVoronoipolygonsArgsSchema = z.object({
  g1: z.unknown(),
  extend_to: z.unknown().optional(),
  tolerance: z.number().optional(),
});

export const stVoronoipolygonsReturnsSchema = z.unknown();

export const stWkbtosqlArgsSchema = z.object({
  wkb: z.string(),
});

export const stWkbtosqlReturnsSchema = z.unknown();

export const stWkttosqlArgsSchema = z.object({
  "": z.string(),
});

export const stWkttosqlReturnsSchema = z.unknown();

export const stWrapxArgsSchema = z.object({
  geom: z.unknown(),
  move: z.number(),
  wrap: z.number(),
});

export const stWrapxReturnsSchema = z.unknown();

export const stXArgsSchema = z.object({
  "": z.unknown(),
});

export const stXReturnsSchema = z.number();

export const stXmaxArgsSchema = z.object({
  "": z.unknown(),
});

export const stXmaxReturnsSchema = z.number();

export const stXminArgsSchema = z.object({
  "": z.unknown(),
});

export const stXminReturnsSchema = z.number();

export const stYArgsSchema = z.object({
  "": z.unknown(),
});

export const stYReturnsSchema = z.number();

export const stYmaxArgsSchema = z.object({
  "": z.unknown(),
});

export const stYmaxReturnsSchema = z.number();

export const stYminArgsSchema = z.object({
  "": z.unknown(),
});

export const stYminReturnsSchema = z.number();

export const stZArgsSchema = z.object({
  "": z.unknown(),
});

export const stZReturnsSchema = z.number();

export const stZmaxArgsSchema = z.object({
  "": z.unknown(),
});

export const stZmaxReturnsSchema = z.number();

export const stZmflagArgsSchema = z.object({
  "": z.unknown(),
});

export const stZmflagReturnsSchema = z.number();

export const stZminArgsSchema = z.object({
  "": z.unknown(),
});

export const stZminReturnsSchema = z.number();

export const textArgsSchema = z.object({
  "": z.unknown(),
});

export const textReturnsSchema = z.string();

export const unlockrowsArgsSchema = z.object({
  "": z.string(),
});

export const unlockrowsReturnsSchema = z.number();

export const updategeometrysridArgsSchema = z.object({
  catalogn_name: z.string(),
  schema_name: z.string(),
  table_name: z.string(),
  column_name: z.string(),
  new_srid_in: z.number(),
});

export const updategeometrysridReturnsSchema = z.string();

export const stDumpReturnsSchema = z.array(gisGeometryDumpSchema);

export const stIsvaliddetailReturnsSchema = gisValidDetailSchema;
