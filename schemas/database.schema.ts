/*
 * ==========================================
 * |          GENERATED BY SUPAZOD          |
 * ==========================================
 */

import { z } from "zod";
import { type Json } from "./../types/database.types";

export const ApplicationStatusSchema = z.union([
  z.literal("applied"),
  z.literal("pending_info"),
  z.literal("rejected"),
  z.literal("approved"),
]);

export const BookingStatusSchema = z.union([
  z.literal("pending"),
  z.literal("confirmed"),
  z.literal("cancelled"),
  z.literal("completed"),
]);

export const DayOfWeekSchema = z.union([
  z.literal("monday"),
  z.literal("tuesday"),
  z.literal("wednesday"),
  z.literal("thursday"),
  z.literal("friday"),
  z.literal("saturday"),
  z.literal("sunday"),
]);

export const MediaTypeSchema = z.union([
  z.literal("avatar"),
  z.literal("service_image"),
  z.literal("review_image"),
  z.literal("chat_image"),
  z.literal("application_image"),
  z.literal("landing_asset"),
  z.literal("logo_asset"),
  z.literal("other"),
]);

export const UserRoleSchema = z.union([
  z.literal("customer"),
  z.literal("stylist"),
  z.literal("admin"),
]);

export const stripeInvoiceStatusSchema = z.union([
  z.literal("draft"),
  z.literal("open"),
  z.literal("paid"),
  z.literal("uncollectible"),
  z.literal("void"),
  z.literal("deleted"),
]);

export const stripePricingTiersSchema = z.union([
  z.literal("graduated"),
  z.literal("volume"),
]);

export const stripePricingTypeSchema = z.union([
  z.literal("one_time"),
  z.literal("recurring"),
]);

export const stripeSubscriptionScheduleStatusSchema = z.union([
  z.literal("not_started"),
  z.literal("active"),
  z.literal("completed"),
  z.literal("released"),
  z.literal("canceled"),
]);

export const stripeSubscriptionStatusSchema = z.union([
  z.literal("trialing"),
  z.literal("active"),
  z.literal("canceled"),
  z.literal("incomplete"),
  z.literal("incomplete_expired"),
  z.literal("past_due"),
  z.literal("unpaid"),
]);

export const jsonSchema: z.ZodSchema<Json> = z.lazy(() =>
  z
    .union([
      z.string(),
      z.number(),
      z.boolean(),
      z.record(z.union([jsonSchema, z.undefined()])),
      z.array(jsonSchema),
    ])
    .nullable(),
);

export const addressesRowSchema = z.object({
  city: z.string(),
  country: z.string(),
  created_at: z.string(),
  entry_instructions: z.string().nullable(),
  id: z.string(),
  is_primary: z.boolean(),
  location: z.unknown().nullable(),
  nickname: z.string().nullable(),
  postal_code: z.string(),
  street_address: z.string(),
  updated_at: z.string(),
  user_id: z.string(),
});

export const addressesInsertSchema = z.object({
  city: z.string(),
  country: z.string(),
  created_at: z.string().optional(),
  entry_instructions: z.string().optional().nullable(),
  id: z.string().optional(),
  is_primary: z.boolean().optional(),
  location: z.unknown().optional().nullable(),
  nickname: z.string().optional().nullable(),
  postal_code: z.string(),
  street_address: z.string(),
  updated_at: z.string().optional(),
  user_id: z.string(),
});

export const addressesUpdateSchema = z.object({
  city: z.string().optional(),
  country: z.string().optional(),
  created_at: z.string().optional(),
  entry_instructions: z.string().optional().nullable(),
  id: z.string().optional(),
  is_primary: z.boolean().optional(),
  location: z.unknown().optional().nullable(),
  nickname: z.string().optional().nullable(),
  postal_code: z.string().optional(),
  street_address: z.string().optional(),
  updated_at: z.string().optional(),
  user_id: z.string().optional(),
});

export const addressesRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("addresses_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const applicationCategoriesRowSchema = z.object({
  application_id: z.string(),
  category_id: z.string(),
});

export const applicationCategoriesInsertSchema = z.object({
  application_id: z.string(),
  category_id: z.string(),
});

export const applicationCategoriesUpdateSchema = z.object({
  application_id: z.string().optional(),
  category_id: z.string().optional(),
});

export const applicationCategoriesRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("application_categories_application_id_fkey"),
    columns: z.tuple([z.literal("application_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("applications"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("application_categories_category_id_fkey"),
    columns: z.tuple([z.literal("category_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("service_categories"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const applicationsRowSchema = z.object({
  address_nickname: z.string().nullable(),
  birth_date: z.string(),
  city: z.string(),
  country: z.string(),
  created_at: z.string(),
  email: z.string(),
  entry_instructions: z.string().nullable(),
  full_name: z.string(),
  id: z.string(),
  phone_number: z.string(),
  postal_code: z.string(),
  price_range_currency: z.string(),
  price_range_from: z.number(),
  price_range_to: z.number(),
  professional_experience: z.string(),
  status: ApplicationStatusSchema,
  street_address: z.string(),
  user_id: z.string().nullable(),
});

export const applicationsInsertSchema = z.object({
  address_nickname: z.string().optional().nullable(),
  birth_date: z.string(),
  city: z.string(),
  country: z.string(),
  created_at: z.string().optional(),
  email: z.string(),
  entry_instructions: z.string().optional().nullable(),
  full_name: z.string(),
  id: z.string().optional(),
  phone_number: z.string(),
  postal_code: z.string(),
  price_range_currency: z.string().optional(),
  price_range_from: z.number(),
  price_range_to: z.number(),
  professional_experience: z.string(),
  status: ApplicationStatusSchema.optional(),
  street_address: z.string(),
  user_id: z.string().optional().nullable(),
});

export const applicationsUpdateSchema = z.object({
  address_nickname: z.string().optional().nullable(),
  birth_date: z.string().optional(),
  city: z.string().optional(),
  country: z.string().optional(),
  created_at: z.string().optional(),
  email: z.string().optional(),
  entry_instructions: z.string().optional().nullable(),
  full_name: z.string().optional(),
  id: z.string().optional(),
  phone_number: z.string().optional(),
  postal_code: z.string().optional(),
  price_range_currency: z.string().optional(),
  price_range_from: z.number().optional(),
  price_range_to: z.number().optional(),
  professional_experience: z.string().optional(),
  status: ApplicationStatusSchema.optional(),
  street_address: z.string().optional(),
  user_id: z.string().optional().nullable(),
});

export const applicationsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("applications_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const bookingServicesRowSchema = z.object({
  booking_id: z.string(),
  service_id: z.string(),
});

export const bookingServicesInsertSchema = z.object({
  booking_id: z.string(),
  service_id: z.string(),
});

export const bookingServicesUpdateSchema = z.object({
  booking_id: z.string().optional(),
  service_id: z.string().optional(),
});

export const bookingServicesRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("booking_services_booking_id_fkey"),
    columns: z.tuple([z.literal("booking_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("bookings"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("booking_services_service_id_fkey"),
    columns: z.tuple([z.literal("service_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("services"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const bookingsRowSchema = z.object({
  address_id: z.string().nullable(),
  cancellation_reason: z.string().nullable(),
  cancelled_at: z.string().nullable(),
  created_at: z.string(),
  customer_id: z.string(),
  discount_applied: z.number(),
  discount_id: z.string().nullable(),
  end_time: z.string(),
  id: z.string(),
  message_to_stylist: z.string().nullable(),
  start_time: z.string(),
  status: BookingStatusSchema,
  stripe_payment_intent_id: z.string().nullable(),
  stylist_id: z.string(),
  total_duration_minutes: z.number(),
  total_price: z.number(),
  updated_at: z.string(),
});

export const bookingsInsertSchema = z.object({
  address_id: z.string().optional().nullable(),
  cancellation_reason: z.string().optional().nullable(),
  cancelled_at: z.string().optional().nullable(),
  created_at: z.string().optional(),
  customer_id: z.string(),
  discount_applied: z.number().optional(),
  discount_id: z.string().optional().nullable(),
  end_time: z.string(),
  id: z.string().optional(),
  message_to_stylist: z.string().optional().nullable(),
  start_time: z.string(),
  status: BookingStatusSchema.optional(),
  stripe_payment_intent_id: z.string().optional().nullable(),
  stylist_id: z.string(),
  total_duration_minutes: z.number(),
  total_price: z.number(),
  updated_at: z.string().optional(),
});

export const bookingsUpdateSchema = z.object({
  address_id: z.string().optional().nullable(),
  cancellation_reason: z.string().optional().nullable(),
  cancelled_at: z.string().optional().nullable(),
  created_at: z.string().optional(),
  customer_id: z.string().optional(),
  discount_applied: z.number().optional(),
  discount_id: z.string().optional().nullable(),
  end_time: z.string().optional(),
  id: z.string().optional(),
  message_to_stylist: z.string().optional().nullable(),
  start_time: z.string().optional(),
  status: BookingStatusSchema.optional(),
  stripe_payment_intent_id: z.string().optional().nullable(),
  stylist_id: z.string().optional(),
  total_duration_minutes: z.number().optional(),
  total_price: z.number().optional(),
  updated_at: z.string().optional(),
});

export const bookingsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("bookings_address_id_fkey"),
    columns: z.tuple([z.literal("address_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("addresses"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("bookings_customer_id_fkey"),
    columns: z.tuple([z.literal("customer_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("bookings_discount_id_fkey"),
    columns: z.tuple([z.literal("discount_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("discounts"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("bookings_stylist_id_fkey"),
    columns: z.tuple([z.literal("stylist_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const chatMessagesRowSchema = z.object({
  chat_id: z.string(),
  content: z.string(),
  created_at: z.string(),
  id: z.string(),
  is_read: z.boolean(),
  sender_id: z.string(),
});

export const chatMessagesInsertSchema = z.object({
  chat_id: z.string(),
  content: z.string(),
  created_at: z.string().optional(),
  id: z.string().optional(),
  is_read: z.boolean().optional(),
  sender_id: z.string(),
});

export const chatMessagesUpdateSchema = z.object({
  chat_id: z.string().optional(),
  content: z.string().optional(),
  created_at: z.string().optional(),
  id: z.string().optional(),
  is_read: z.boolean().optional(),
  sender_id: z.string().optional(),
});

export const chatMessagesRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("chat_messages_chat_id_fkey"),
    columns: z.tuple([z.literal("chat_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("chats"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("chat_messages_sender_id_fkey"),
    columns: z.tuple([z.literal("sender_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const chatsRowSchema = z.object({
  booking_id: z.string(),
  created_at: z.string(),
  id: z.string(),
  updated_at: z.string(),
});

export const chatsInsertSchema = z.object({
  booking_id: z.string(),
  created_at: z.string().optional(),
  id: z.string().optional(),
  updated_at: z.string().optional(),
});

export const chatsUpdateSchema = z.object({
  booking_id: z.string().optional(),
  created_at: z.string().optional(),
  id: z.string().optional(),
  updated_at: z.string().optional(),
});

export const chatsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("chats_booking_id_fkey"),
    columns: z.tuple([z.literal("booking_id")]),
    isOneToOne: z.literal(true),
    referencedRelation: z.literal("bookings"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const discountsRowSchema = z.object({
  code: z.string(),
  created_at: z.string(),
  currency: z.string(),
  current_uses: z.number(),
  description: z.string().nullable(),
  discount_amount: z.number().nullable(),
  discount_percentage: z.number().nullable(),
  expires_at: z.string().nullable(),
  id: z.string(),
  is_active: z.boolean(),
  max_uses: z.number().nullable(),
  max_uses_per_user: z.number(),
  minimum_order_amount: z.number().nullable(),
  updated_at: z.string(),
  valid_from: z.string(),
});

export const discountsInsertSchema = z.object({
  code: z.string(),
  created_at: z.string().optional(),
  currency: z.string().optional(),
  current_uses: z.number().optional(),
  description: z.string().optional().nullable(),
  discount_amount: z.number().optional().nullable(),
  discount_percentage: z.number().optional().nullable(),
  expires_at: z.string().optional().nullable(),
  id: z.string().optional(),
  is_active: z.boolean().optional(),
  max_uses: z.number().optional().nullable(),
  max_uses_per_user: z.number().optional(),
  minimum_order_amount: z.number().optional().nullable(),
  updated_at: z.string().optional(),
  valid_from: z.string().optional(),
});

export const discountsUpdateSchema = z.object({
  code: z.string().optional(),
  created_at: z.string().optional(),
  currency: z.string().optional(),
  current_uses: z.number().optional(),
  description: z.string().optional().nullable(),
  discount_amount: z.number().optional().nullable(),
  discount_percentage: z.number().optional().nullable(),
  expires_at: z.string().optional().nullable(),
  id: z.string().optional(),
  is_active: z.boolean().optional(),
  max_uses: z.number().optional().nullable(),
  max_uses_per_user: z.number().optional(),
  minimum_order_amount: z.number().optional().nullable(),
  updated_at: z.string().optional(),
  valid_from: z.string().optional(),
});

export const mediaRowSchema = z.object({
  application_id: z.string().nullable(),
  chat_message_id: z.string().nullable(),
  created_at: z.string(),
  file_path: z.string(),
  id: z.string(),
  media_type: MediaTypeSchema,
  owner_id: z.string().nullable(),
  review_id: z.string().nullable(),
  service_id: z.string().nullable(),
});

export const mediaInsertSchema = z.object({
  application_id: z.string().optional().nullable(),
  chat_message_id: z.string().optional().nullable(),
  created_at: z.string().optional(),
  file_path: z.string(),
  id: z.string().optional(),
  media_type: MediaTypeSchema,
  owner_id: z.string().optional().nullable(),
  review_id: z.string().optional().nullable(),
  service_id: z.string().optional().nullable(),
});

export const mediaUpdateSchema = z.object({
  application_id: z.string().optional().nullable(),
  chat_message_id: z.string().optional().nullable(),
  created_at: z.string().optional(),
  file_path: z.string().optional(),
  id: z.string().optional(),
  media_type: MediaTypeSchema.optional(),
  owner_id: z.string().optional().nullable(),
  review_id: z.string().optional().nullable(),
  service_id: z.string().optional().nullable(),
});

export const mediaRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("media_application_id_fkey"),
    columns: z.tuple([z.literal("application_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("applications"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("media_chat_message_id_fkey"),
    columns: z.tuple([z.literal("chat_message_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("chat_messages"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("media_owner_id_fkey"),
    columns: z.tuple([z.literal("owner_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("media_review_id_fkey"),
    columns: z.tuple([z.literal("review_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("reviews"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("media_service_id_fkey"),
    columns: z.tuple([z.literal("service_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("services"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const paymentsRowSchema = z.object({
  booking_id: z.string(),
  created_at: z.string(),
  currency: z.string(),
  id: z.string(),
  payment_intent_id: z.string(),
  payout_completed_at: z.string().nullable(),
  payout_initiated_at: z.string().nullable(),
  platform_fee: z.number(),
  status: z.string(),
  stylist_payout_amount: z.number(),
  stylist_transfer_id: z.string().nullable(),
  succeeded_at: z.string().nullable(),
  total_amount: z.number(),
  updated_at: z.string(),
});

export const paymentsInsertSchema = z.object({
  booking_id: z.string(),
  created_at: z.string().optional(),
  currency: z.string().optional(),
  id: z.string().optional(),
  payment_intent_id: z.string(),
  payout_completed_at: z.string().optional().nullable(),
  payout_initiated_at: z.string().optional().nullable(),
  platform_fee: z.number(),
  status: z.string().optional(),
  stylist_payout_amount: z.number(),
  stylist_transfer_id: z.string().optional().nullable(),
  succeeded_at: z.string().optional().nullable(),
  total_amount: z.number(),
  updated_at: z.string().optional(),
});

export const paymentsUpdateSchema = z.object({
  booking_id: z.string().optional(),
  created_at: z.string().optional(),
  currency: z.string().optional(),
  id: z.string().optional(),
  payment_intent_id: z.string().optional(),
  payout_completed_at: z.string().optional().nullable(),
  payout_initiated_at: z.string().optional().nullable(),
  platform_fee: z.number().optional(),
  status: z.string().optional(),
  stylist_payout_amount: z.number().optional(),
  stylist_transfer_id: z.string().optional().nullable(),
  succeeded_at: z.string().optional().nullable(),
  total_amount: z.number().optional(),
  updated_at: z.string().optional(),
});

export const paymentsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("payments_booking_id_fkey"),
    columns: z.tuple([z.literal("booking_id")]),
    isOneToOne: z.literal(true),
    referencedRelation: z.literal("bookings"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const profilesRowSchema = z.object({
  bankid_verified: z.boolean(),
  created_at: z.string(),
  email: z.string().nullable(),
  full_name: z.string().nullable(),
  id: z.string(),
  phone_number: z.string().nullable(),
  role: UserRoleSchema,
  stripe_customer_id: z.string().nullable(),
  subscribed_to_newsletter: z.boolean(),
  updated_at: z.string(),
});

export const profilesInsertSchema = z.object({
  bankid_verified: z.boolean().optional(),
  created_at: z.string().optional(),
  email: z.string().optional().nullable(),
  full_name: z.string().optional().nullable(),
  id: z.string(),
  phone_number: z.string().optional().nullable(),
  role: UserRoleSchema.optional(),
  stripe_customer_id: z.string().optional().nullable(),
  subscribed_to_newsletter: z.boolean().optional(),
  updated_at: z.string().optional(),
});

export const profilesUpdateSchema = z.object({
  bankid_verified: z.boolean().optional(),
  created_at: z.string().optional(),
  email: z.string().optional().nullable(),
  full_name: z.string().optional().nullable(),
  id: z.string().optional(),
  phone_number: z.string().optional().nullable(),
  role: UserRoleSchema.optional(),
  stripe_customer_id: z.string().optional().nullable(),
  subscribed_to_newsletter: z.boolean().optional(),
  updated_at: z.string().optional(),
});

export const recurringUnavailabilityExceptionsRowSchema = z.object({
  id: z.string(),
  new_end_time: z.string().nullable(),
  new_start_time: z.string().nullable(),
  original_start_time: z.string(),
  series_id: z.string(),
});

export const recurringUnavailabilityExceptionsInsertSchema = z.object({
  id: z.string().optional(),
  new_end_time: z.string().optional().nullable(),
  new_start_time: z.string().optional().nullable(),
  original_start_time: z.string(),
  series_id: z.string(),
});

export const recurringUnavailabilityExceptionsUpdateSchema = z.object({
  id: z.string().optional(),
  new_end_time: z.string().optional().nullable(),
  new_start_time: z.string().optional().nullable(),
  original_start_time: z.string().optional(),
  series_id: z.string().optional(),
});

export const recurringUnavailabilityExceptionsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal(
      "recurring_unavailability_exceptions_series_id_fkey",
    ),
    columns: z.tuple([z.literal("series_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("stylist_recurring_unavailability"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const reviewsRowSchema = z.object({
  billing_zip: z.string().nullable(),
  charge: z.string().nullable(),
  closed_reason: z.string().nullable(),
  created: z.number().nullable(),
  id: z.string(),
  ip_address: z.string().nullable(),
  ip_address_location: jsonSchema.nullable(),
  livemode: z.boolean().nullable(),
  object: z.string().nullable(),
  open: z.boolean().nullable(),
  opened_reason: z.string().nullable(),
  payment_intent: z.string().nullable(),
  reason: z.string().nullable(),
  session: z.string().nullable(),
  updated_at: z.string(),
});

export const reviewsInsertSchema = z.object({
  billing_zip: z.string().optional().nullable(),
  charge: z.string().optional().nullable(),
  closed_reason: z.string().optional().nullable(),
  created: z.number().optional().nullable(),
  id: z.string(),
  ip_address: z.string().optional().nullable(),
  ip_address_location: jsonSchema.optional().nullable(),
  livemode: z.boolean().optional().nullable(),
  object: z.string().optional().nullable(),
  open: z.boolean().optional().nullable(),
  opened_reason: z.string().optional().nullable(),
  payment_intent: z.string().optional().nullable(),
  reason: z.string().optional().nullable(),
  session: z.string().optional().nullable(),
  updated_at: z.string().optional(),
});

export const reviewsUpdateSchema = z.object({
  billing_zip: z.string().optional().nullable(),
  charge: z.string().optional().nullable(),
  closed_reason: z.string().optional().nullable(),
  created: z.number().optional().nullable(),
  id: z.string().optional(),
  ip_address: z.string().optional().nullable(),
  ip_address_location: jsonSchema.optional().nullable(),
  livemode: z.boolean().optional().nullable(),
  object: z.string().optional().nullable(),
  open: z.boolean().optional().nullable(),
  opened_reason: z.string().optional().nullable(),
  payment_intent: z.string().optional().nullable(),
  reason: z.string().optional().nullable(),
  session: z.string().optional().nullable(),
  updated_at: z.string().optional(),
});

export const reviewsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("reviews_booking_id_fkey"),
    columns: z.tuple([z.literal("booking_id")]),
    isOneToOne: z.literal(true),
    referencedRelation: z.literal("bookings"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("reviews_customer_id_fkey"),
    columns: z.tuple([z.literal("customer_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("reviews_stylist_id_fkey"),
    columns: z.tuple([z.literal("stylist_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const serviceCategoriesRowSchema = z.object({
  description: z.string().nullable(),
  id: z.string(),
  name: z.string(),
  parent_category_id: z.string().nullable(),
});

export const serviceCategoriesInsertSchema = z.object({
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  name: z.string(),
  parent_category_id: z.string().optional().nullable(),
});

export const serviceCategoriesUpdateSchema = z.object({
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  name: z.string().optional(),
  parent_category_id: z.string().optional().nullable(),
});

export const serviceCategoriesRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("service_categories_parent_category_id_fkey"),
    columns: z.tuple([z.literal("parent_category_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("service_categories"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const serviceServiceCategoriesRowSchema = z.object({
  category_id: z.string(),
  service_id: z.string(),
});

export const serviceServiceCategoriesInsertSchema = z.object({
  category_id: z.string(),
  service_id: z.string(),
});

export const serviceServiceCategoriesUpdateSchema = z.object({
  category_id: z.string().optional(),
  service_id: z.string().optional(),
});

export const serviceServiceCategoriesRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("service_service_categories_category_id_fkey"),
    columns: z.tuple([z.literal("category_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("service_categories"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("service_service_categories_service_id_fkey"),
    columns: z.tuple([z.literal("service_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("services"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const servicesRowSchema = z.object({
  at_customer_place: z.boolean(),
  at_stylist_place: z.boolean(),
  created_at: z.string(),
  currency: z.string(),
  description: z.string().nullable(),
  duration_minutes: z.number(),
  id: z.string(),
  is_published: z.boolean(),
  price: z.number(),
  stylist_id: z.string(),
  title: z.string(),
  updated_at: z.string(),
});

export const servicesInsertSchema = z.object({
  at_customer_place: z.boolean().optional(),
  at_stylist_place: z.boolean().optional(),
  created_at: z.string().optional(),
  currency: z.string().optional(),
  description: z.string().optional().nullable(),
  duration_minutes: z.number(),
  id: z.string().optional(),
  is_published: z.boolean().optional(),
  price: z.number(),
  stylist_id: z.string(),
  title: z.string(),
  updated_at: z.string().optional(),
});

export const servicesUpdateSchema = z.object({
  at_customer_place: z.boolean().optional(),
  at_stylist_place: z.boolean().optional(),
  created_at: z.string().optional(),
  currency: z.string().optional(),
  description: z.string().optional().nullable(),
  duration_minutes: z.number().optional(),
  id: z.string().optional(),
  is_published: z.boolean().optional(),
  price: z.number().optional(),
  stylist_id: z.string().optional(),
  title: z.string().optional(),
  updated_at: z.string().optional(),
});

export const servicesRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("services_stylist_id_fkey"),
    columns: z.tuple([z.literal("stylist_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const stylistAvailabilityRulesRowSchema = z.object({
  day_of_week: DayOfWeekSchema,
  end_time: z.string(),
  id: z.string(),
  start_time: z.string(),
  stylist_id: z.string(),
});

export const stylistAvailabilityRulesInsertSchema = z.object({
  day_of_week: DayOfWeekSchema,
  end_time: z.string(),
  id: z.string().optional(),
  start_time: z.string(),
  stylist_id: z.string(),
});

export const stylistAvailabilityRulesUpdateSchema = z.object({
  day_of_week: DayOfWeekSchema.optional(),
  end_time: z.string().optional(),
  id: z.string().optional(),
  start_time: z.string().optional(),
  stylist_id: z.string().optional(),
});

export const stylistAvailabilityRulesRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("stylist_availability_rules_stylist_id_fkey"),
    columns: z.tuple([z.literal("stylist_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const stylistDetailsRowSchema = z.object({
  bio: z.string().nullable(),
  can_travel: z.boolean(),
  created_at: z.string(),
  facebook_profile: z.string().nullable(),
  has_own_place: z.boolean(),
  instagram_profile: z.string().nullable(),
  other_social_media_urls: z.array(z.string()).nullable(),
  profile_id: z.string(),
  snapchat_profile: z.string().nullable(),
  stripe_account_id: z.string().nullable(),
  tiktok_profile: z.string().nullable(),
  travel_distance_km: z.number().nullable(),
  updated_at: z.string(),
  youtube_profile: z.string().nullable(),
});

export const stylistDetailsInsertSchema = z.object({
  bio: z.string().optional().nullable(),
  can_travel: z.boolean().optional(),
  created_at: z.string().optional(),
  facebook_profile: z.string().optional().nullable(),
  has_own_place: z.boolean().optional(),
  instagram_profile: z.string().optional().nullable(),
  other_social_media_urls: z.array(z.string()).optional().nullable(),
  profile_id: z.string(),
  snapchat_profile: z.string().optional().nullable(),
  stripe_account_id: z.string().optional().nullable(),
  tiktok_profile: z.string().optional().nullable(),
  travel_distance_km: z.number().optional().nullable(),
  updated_at: z.string().optional(),
  youtube_profile: z.string().optional().nullable(),
});

export const stylistDetailsUpdateSchema = z.object({
  bio: z.string().optional().nullable(),
  can_travel: z.boolean().optional(),
  created_at: z.string().optional(),
  facebook_profile: z.string().optional().nullable(),
  has_own_place: z.boolean().optional(),
  instagram_profile: z.string().optional().nullable(),
  other_social_media_urls: z.array(z.string()).optional().nullable(),
  profile_id: z.string().optional(),
  snapchat_profile: z.string().optional().nullable(),
  stripe_account_id: z.string().optional().nullable(),
  tiktok_profile: z.string().optional().nullable(),
  travel_distance_km: z.number().optional().nullable(),
  updated_at: z.string().optional(),
  youtube_profile: z.string().optional().nullable(),
});

export const stylistDetailsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("stylist_details_profile_id_fkey"),
    columns: z.tuple([z.literal("profile_id")]),
    isOneToOne: z.literal(true),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const stylistRecurringUnavailabilityRowSchema = z.object({
  end_time: z.string(),
  id: z.string(),
  rrule: z.string(),
  series_end_date: z.string().nullable(),
  series_start_date: z.string(),
  start_time: z.string(),
  stylist_id: z.string(),
  title: z.string().nullable(),
});

export const stylistRecurringUnavailabilityInsertSchema = z.object({
  end_time: z.string(),
  id: z.string().optional(),
  rrule: z.string(),
  series_end_date: z.string().optional().nullable(),
  series_start_date: z.string(),
  start_time: z.string(),
  stylist_id: z.string(),
  title: z.string().optional().nullable(),
});

export const stylistRecurringUnavailabilityUpdateSchema = z.object({
  end_time: z.string().optional(),
  id: z.string().optional(),
  rrule: z.string().optional(),
  series_end_date: z.string().optional().nullable(),
  series_start_date: z.string().optional(),
  start_time: z.string().optional(),
  stylist_id: z.string().optional(),
  title: z.string().optional().nullable(),
});

export const stylistRecurringUnavailabilityRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal(
      "stylist_recurring_unavailability_stylist_id_fkey",
    ),
    columns: z.tuple([z.literal("stylist_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const stylistUnavailabilityRowSchema = z.object({
  end_time: z.string(),
  id: z.string(),
  reason: z.string().nullable(),
  start_time: z.string(),
  stylist_id: z.string(),
});

export const stylistUnavailabilityInsertSchema = z.object({
  end_time: z.string(),
  id: z.string().optional(),
  reason: z.string().optional().nullable(),
  start_time: z.string(),
  stylist_id: z.string(),
});

export const stylistUnavailabilityUpdateSchema = z.object({
  end_time: z.string().optional(),
  id: z.string().optional(),
  reason: z.string().optional().nullable(),
  start_time: z.string().optional(),
  stylist_id: z.string().optional(),
});

export const stylistUnavailabilityRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("stylist_unavailability_stylist_id_fkey"),
    columns: z.tuple([z.literal("stylist_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const getMyRoleArgsSchema = z.object({});

export const getMyRoleReturnsSchema = UserRoleSchema;

export const nearbyAddressesArgsSchema = z.object({
  lat: z.number(),
  long: z.number(),
  radius_km: z.number().optional(),
});

export const nearbyAddressesReturnsSchema = z.array(
  z.object({
    city: z.string(),
    country: z.string(),
    distance_meters: z.number(),
    entry_instructions: z.string(),
    id: z.string(),
    is_primary: z.boolean(),
    lat: z.number(),
    long: z.number(),
    nickname: z.string(),
    postal_code: z.string(),
    street_address: z.string(),
    user_id: z.string(),
  }),
);

export const chargesRowSchema = z.object({
  amount: z.number().nullable(),
  amount_refunded: z.number().nullable(),
  application: z.string().nullable(),
  application_fee: z.string().nullable(),
  balance_transaction: z.string().nullable(),
  captured: z.boolean().nullable(),
  created: z.number().nullable(),
  currency: z.string().nullable(),
  customer: z.string().nullable(),
  description: z.string().nullable(),
  destination: z.string().nullable(),
  dispute: z.string().nullable(),
  failure_code: z.string().nullable(),
  failure_message: z.string().nullable(),
  fraud_details: jsonSchema.nullable(),
  id: z.string(),
  invoice: z.string().nullable(),
  livemode: z.boolean().nullable(),
  metadata: jsonSchema.nullable(),
  object: z.string().nullable(),
  on_behalf_of: z.string().nullable(),
  order: z.string().nullable(),
  outcome: jsonSchema.nullable(),
  paid: z.boolean().nullable(),
  payment_intent: z.string().nullable(),
  payment_method_details: jsonSchema.nullable(),
  receipt_email: z.string().nullable(),
  receipt_number: z.string().nullable(),
  refunded: z.boolean().nullable(),
  refunds: jsonSchema.nullable(),
  review: z.string().nullable(),
  shipping: jsonSchema.nullable(),
  source: jsonSchema.nullable(),
  source_transfer: z.string().nullable(),
  statement_descriptor: z.string().nullable(),
  status: z.string().nullable(),
  transfer_group: z.string().nullable(),
  updated: z.number().nullable(),
  updated_at: z.string(),
});

export const chargesInsertSchema = z.object({
  amount: z.number().optional().nullable(),
  amount_refunded: z.number().optional().nullable(),
  application: z.string().optional().nullable(),
  application_fee: z.string().optional().nullable(),
  balance_transaction: z.string().optional().nullable(),
  captured: z.boolean().optional().nullable(),
  created: z.number().optional().nullable(),
  currency: z.string().optional().nullable(),
  customer: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  destination: z.string().optional().nullable(),
  dispute: z.string().optional().nullable(),
  failure_code: z.string().optional().nullable(),
  failure_message: z.string().optional().nullable(),
  fraud_details: jsonSchema.optional().nullable(),
  id: z.string(),
  invoice: z.string().optional().nullable(),
  livemode: z.boolean().optional().nullable(),
  metadata: jsonSchema.optional().nullable(),
  object: z.string().optional().nullable(),
  on_behalf_of: z.string().optional().nullable(),
  order: z.string().optional().nullable(),
  outcome: jsonSchema.optional().nullable(),
  paid: z.boolean().optional().nullable(),
  payment_intent: z.string().optional().nullable(),
  payment_method_details: jsonSchema.optional().nullable(),
  receipt_email: z.string().optional().nullable(),
  receipt_number: z.string().optional().nullable(),
  refunded: z.boolean().optional().nullable(),
  refunds: jsonSchema.optional().nullable(),
  review: z.string().optional().nullable(),
  shipping: jsonSchema.optional().nullable(),
  source: jsonSchema.optional().nullable(),
  source_transfer: z.string().optional().nullable(),
  statement_descriptor: z.string().optional().nullable(),
  status: z.string().optional().nullable(),
  transfer_group: z.string().optional().nullable(),
  updated: z.number().optional().nullable(),
  updated_at: z.string().optional(),
});

export const chargesUpdateSchema = z.object({
  amount: z.number().optional().nullable(),
  amount_refunded: z.number().optional().nullable(),
  application: z.string().optional().nullable(),
  application_fee: z.string().optional().nullable(),
  balance_transaction: z.string().optional().nullable(),
  captured: z.boolean().optional().nullable(),
  created: z.number().optional().nullable(),
  currency: z.string().optional().nullable(),
  customer: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  destination: z.string().optional().nullable(),
  dispute: z.string().optional().nullable(),
  failure_code: z.string().optional().nullable(),
  failure_message: z.string().optional().nullable(),
  fraud_details: jsonSchema.optional().nullable(),
  id: z.string().optional(),
  invoice: z.string().optional().nullable(),
  livemode: z.boolean().optional().nullable(),
  metadata: jsonSchema.optional().nullable(),
  object: z.string().optional().nullable(),
  on_behalf_of: z.string().optional().nullable(),
  order: z.string().optional().nullable(),
  outcome: jsonSchema.optional().nullable(),
  paid: z.boolean().optional().nullable(),
  payment_intent: z.string().optional().nullable(),
  payment_method_details: jsonSchema.optional().nullable(),
  receipt_email: z.string().optional().nullable(),
  receipt_number: z.string().optional().nullable(),
  refunded: z.boolean().optional().nullable(),
  refunds: jsonSchema.optional().nullable(),
  review: z.string().optional().nullable(),
  shipping: jsonSchema.optional().nullable(),
  source: jsonSchema.optional().nullable(),
  source_transfer: z.string().optional().nullable(),
  statement_descriptor: z.string().optional().nullable(),
  status: z.string().optional().nullable(),
  transfer_group: z.string().optional().nullable(),
  updated: z.number().optional().nullable(),
  updated_at: z.string().optional(),
});

export const couponsRowSchema = z.object({
  amount_off: z.number().nullable(),
  created: z.number().nullable(),
  currency: z.string().nullable(),
  duration: z.string().nullable(),
  duration_in_months: z.number().nullable(),
  id: z.string(),
  livemode: z.boolean().nullable(),
  max_redemptions: z.number().nullable(),
  metadata: jsonSchema.nullable(),
  name: z.string().nullable(),
  object: z.string().nullable(),
  percent_off: z.number().nullable(),
  percent_off_precise: z.number().nullable(),
  redeem_by: z.number().nullable(),
  times_redeemed: z.number().nullable(),
  updated: z.number().nullable(),
  updated_at: z.string(),
  valid: z.boolean().nullable(),
});

export const couponsInsertSchema = z.object({
  amount_off: z.number().optional().nullable(),
  created: z.number().optional().nullable(),
  currency: z.string().optional().nullable(),
  duration: z.string().optional().nullable(),
  duration_in_months: z.number().optional().nullable(),
  id: z.string(),
  livemode: z.boolean().optional().nullable(),
  max_redemptions: z.number().optional().nullable(),
  metadata: jsonSchema.optional().nullable(),
  name: z.string().optional().nullable(),
  object: z.string().optional().nullable(),
  percent_off: z.number().optional().nullable(),
  percent_off_precise: z.number().optional().nullable(),
  redeem_by: z.number().optional().nullable(),
  times_redeemed: z.number().optional().nullable(),
  updated: z.number().optional().nullable(),
  updated_at: z.string().optional(),
  valid: z.boolean().optional().nullable(),
});

export const couponsUpdateSchema = z.object({
  amount_off: z.number().optional().nullable(),
  created: z.number().optional().nullable(),
  currency: z.string().optional().nullable(),
  duration: z.string().optional().nullable(),
  duration_in_months: z.number().optional().nullable(),
  id: z.string().optional(),
  livemode: z.boolean().optional().nullable(),
  max_redemptions: z.number().optional().nullable(),
  metadata: jsonSchema.optional().nullable(),
  name: z.string().optional().nullable(),
  object: z.string().optional().nullable(),
  percent_off: z.number().optional().nullable(),
  percent_off_precise: z.number().optional().nullable(),
  redeem_by: z.number().optional().nullable(),
  times_redeemed: z.number().optional().nullable(),
  updated: z.number().optional().nullable(),
  updated_at: z.string().optional(),
  valid: z.boolean().optional().nullable(),
});

export const creditNotesRowSchema = z.object({
  amount: z.number().nullable(),
  amount_shipping: z.number().nullable(),
  created: z.number().nullable(),
  currency: z.string().nullable(),
  customer: z.string().nullable(),
  customer_balance_transaction: z.string().nullable(),
  discount_amount: z.number().nullable(),
  discount_amounts: jsonSchema.nullable(),
  id: z.string(),
  invoice: z.string().nullable(),
  lines: jsonSchema.nullable(),
  livemode: z.boolean().nullable(),
  memo: z.string().nullable(),
  metadata: jsonSchema.nullable(),
  number: z.string().nullable(),
  object: z.string().nullable(),
  out_of_band_amount: z.number().nullable(),
  pdf: z.string().nullable(),
  reason: z.string().nullable(),
  refund: z.string().nullable(),
  shipping_cost: jsonSchema.nullable(),
  status: z.string().nullable(),
  subtotal: z.number().nullable(),
  subtotal_excluding_tax: z.number().nullable(),
  tax_amounts: jsonSchema.nullable(),
  total: z.number().nullable(),
  total_excluding_tax: z.number().nullable(),
  type: z.string().nullable(),
  voided_at: z.string().nullable(),
});

export const creditNotesInsertSchema = z.object({
  amount: z.number().optional().nullable(),
  amount_shipping: z.number().optional().nullable(),
  created: z.number().optional().nullable(),
  currency: z.string().optional().nullable(),
  customer: z.string().optional().nullable(),
  customer_balance_transaction: z.string().optional().nullable(),
  discount_amount: z.number().optional().nullable(),
  discount_amounts: jsonSchema.optional().nullable(),
  id: z.string(),
  invoice: z.string().optional().nullable(),
  lines: jsonSchema.optional().nullable(),
  livemode: z.boolean().optional().nullable(),
  memo: z.string().optional().nullable(),
  metadata: jsonSchema.optional().nullable(),
  number: z.string().optional().nullable(),
  object: z.string().optional().nullable(),
  out_of_band_amount: z.number().optional().nullable(),
  pdf: z.string().optional().nullable(),
  reason: z.string().optional().nullable(),
  refund: z.string().optional().nullable(),
  shipping_cost: jsonSchema.optional().nullable(),
  status: z.string().optional().nullable(),
  subtotal: z.number().optional().nullable(),
  subtotal_excluding_tax: z.number().optional().nullable(),
  tax_amounts: jsonSchema.optional().nullable(),
  total: z.number().optional().nullable(),
  total_excluding_tax: z.number().optional().nullable(),
  type: z.string().optional().nullable(),
  voided_at: z.string().optional().nullable(),
});

export const creditNotesUpdateSchema = z.object({
  amount: z.number().optional().nullable(),
  amount_shipping: z.number().optional().nullable(),
  created: z.number().optional().nullable(),
  currency: z.string().optional().nullable(),
  customer: z.string().optional().nullable(),
  customer_balance_transaction: z.string().optional().nullable(),
  discount_amount: z.number().optional().nullable(),
  discount_amounts: jsonSchema.optional().nullable(),
  id: z.string().optional(),
  invoice: z.string().optional().nullable(),
  lines: jsonSchema.optional().nullable(),
  livemode: z.boolean().optional().nullable(),
  memo: z.string().optional().nullable(),
  metadata: jsonSchema.optional().nullable(),
  number: z.string().optional().nullable(),
  object: z.string().optional().nullable(),
  out_of_band_amount: z.number().optional().nullable(),
  pdf: z.string().optional().nullable(),
  reason: z.string().optional().nullable(),
  refund: z.string().optional().nullable(),
  shipping_cost: jsonSchema.optional().nullable(),
  status: z.string().optional().nullable(),
  subtotal: z.number().optional().nullable(),
  subtotal_excluding_tax: z.number().optional().nullable(),
  tax_amounts: jsonSchema.optional().nullable(),
  total: z.number().optional().nullable(),
  total_excluding_tax: z.number().optional().nullable(),
  type: z.string().optional().nullable(),
  voided_at: z.string().optional().nullable(),
});

export const customersRowSchema = z.object({
  address: jsonSchema.nullable(),
  balance: z.number().nullable(),
  created: z.number().nullable(),
  currency: z.string().nullable(),
  default_source: z.string().nullable(),
  deleted: z.boolean(),
  delinquent: z.boolean().nullable(),
  description: z.string().nullable(),
  discount: jsonSchema.nullable(),
  email: z.string().nullable(),
  id: z.string(),
  invoice_prefix: z.string().nullable(),
  invoice_settings: jsonSchema.nullable(),
  livemode: z.boolean().nullable(),
  metadata: jsonSchema.nullable(),
  name: z.string().nullable(),
  next_invoice_sequence: z.number().nullable(),
  object: z.string().nullable(),
  phone: z.string().nullable(),
  preferred_locales: jsonSchema.nullable(),
  shipping: jsonSchema.nullable(),
  tax_exempt: z.string().nullable(),
  updated_at: z.string(),
});

export const customersInsertSchema = z.object({
  address: jsonSchema.optional().nullable(),
  balance: z.number().optional().nullable(),
  created: z.number().optional().nullable(),
  currency: z.string().optional().nullable(),
  default_source: z.string().optional().nullable(),
  deleted: z.boolean().optional(),
  delinquent: z.boolean().optional().nullable(),
  description: z.string().optional().nullable(),
  discount: jsonSchema.optional().nullable(),
  email: z.string().optional().nullable(),
  id: z.string(),
  invoice_prefix: z.string().optional().nullable(),
  invoice_settings: jsonSchema.optional().nullable(),
  livemode: z.boolean().optional().nullable(),
  metadata: jsonSchema.optional().nullable(),
  name: z.string().optional().nullable(),
  next_invoice_sequence: z.number().optional().nullable(),
  object: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  preferred_locales: jsonSchema.optional().nullable(),
  shipping: jsonSchema.optional().nullable(),
  tax_exempt: z.string().optional().nullable(),
  updated_at: z.string().optional(),
});

export const customersUpdateSchema = z.object({
  address: jsonSchema.optional().nullable(),
  balance: z.number().optional().nullable(),
  created: z.number().optional().nullable(),
  currency: z.string().optional().nullable(),
  default_source: z.string().optional().nullable(),
  deleted: z.boolean().optional(),
  delinquent: z.boolean().optional().nullable(),
  description: z.string().optional().nullable(),
  discount: jsonSchema.optional().nullable(),
  email: z.string().optional().nullable(),
  id: z.string().optional(),
  invoice_prefix: z.string().optional().nullable(),
  invoice_settings: jsonSchema.optional().nullable(),
  livemode: z.boolean().optional().nullable(),
  metadata: jsonSchema.optional().nullable(),
  name: z.string().optional().nullable(),
  next_invoice_sequence: z.number().optional().nullable(),
  object: z.string().optional().nullable(),
  phone: z.string().optional().nullable(),
  preferred_locales: jsonSchema.optional().nullable(),
  shipping: jsonSchema.optional().nullable(),
  tax_exempt: z.string().optional().nullable(),
  updated_at: z.string().optional(),
});

export const disputesRowSchema = z.object({
  amount: z.number().nullable(),
  balance_transactions: jsonSchema.nullable(),
  charge: z.string().nullable(),
  created: z.number().nullable(),
  currency: z.string().nullable(),
  evidence: jsonSchema.nullable(),
  evidence_details: jsonSchema.nullable(),
  id: z.string(),
  is_charge_refundable: z.boolean().nullable(),
  livemode: z.boolean().nullable(),
  metadata: jsonSchema.nullable(),
  object: z.string().nullable(),
  payment_intent: z.string().nullable(),
  reason: z.string().nullable(),
  status: z.string().nullable(),
  updated: z.number().nullable(),
  updated_at: z.string(),
});

export const disputesInsertSchema = z.object({
  amount: z.number().optional().nullable(),
  balance_transactions: jsonSchema.optional().nullable(),
  charge: z.string().optional().nullable(),
  created: z.number().optional().nullable(),
  currency: z.string().optional().nullable(),
  evidence: jsonSchema.optional().nullable(),
  evidence_details: jsonSchema.optional().nullable(),
  id: z.string(),
  is_charge_refundable: z.boolean().optional().nullable(),
  livemode: z.boolean().optional().nullable(),
  metadata: jsonSchema.optional().nullable(),
  object: z.string().optional().nullable(),
  payment_intent: z.string().optional().nullable(),
  reason: z.string().optional().nullable(),
  status: z.string().optional().nullable(),
  updated: z.number().optional().nullable(),
  updated_at: z.string().optional(),
});

export const disputesUpdateSchema = z.object({
  amount: z.number().optional().nullable(),
  balance_transactions: jsonSchema.optional().nullable(),
  charge: z.string().optional().nullable(),
  created: z.number().optional().nullable(),
  currency: z.string().optional().nullable(),
  evidence: jsonSchema.optional().nullable(),
  evidence_details: jsonSchema.optional().nullable(),
  id: z.string().optional(),
  is_charge_refundable: z.boolean().optional().nullable(),
  livemode: z.boolean().optional().nullable(),
  metadata: jsonSchema.optional().nullable(),
  object: z.string().optional().nullable(),
  payment_intent: z.string().optional().nullable(),
  reason: z.string().optional().nullable(),
  status: z.string().optional().nullable(),
  updated: z.number().optional().nullable(),
  updated_at: z.string().optional(),
});

export const earlyFraudWarningsRowSchema = z.object({
  actionable: z.boolean().nullable(),
  charge: z.string().nullable(),
  created: z.number().nullable(),
  fraud_type: z.string().nullable(),
  id: z.string(),
  livemode: z.boolean().nullable(),
  object: z.string().nullable(),
  payment_intent: z.string().nullable(),
  updated_at: z.string(),
});

export const earlyFraudWarningsInsertSchema = z.object({
  actionable: z.boolean().optional().nullable(),
  charge: z.string().optional().nullable(),
  created: z.number().optional().nullable(),
  fraud_type: z.string().optional().nullable(),
  id: z.string(),
  livemode: z.boolean().optional().nullable(),
  object: z.string().optional().nullable(),
  payment_intent: z.string().optional().nullable(),
  updated_at: z.string().optional(),
});

export const earlyFraudWarningsUpdateSchema = z.object({
  actionable: z.boolean().optional().nullable(),
  charge: z.string().optional().nullable(),
  created: z.number().optional().nullable(),
  fraud_type: z.string().optional().nullable(),
  id: z.string().optional(),
  livemode: z.boolean().optional().nullable(),
  object: z.string().optional().nullable(),
  payment_intent: z.string().optional().nullable(),
  updated_at: z.string().optional(),
});

export const eventsRowSchema = z.object({
  api_version: z.string().nullable(),
  created: z.number().nullable(),
  data: jsonSchema.nullable(),
  id: z.string(),
  livemode: z.boolean().nullable(),
  object: z.string().nullable(),
  pending_webhooks: z.number().nullable(),
  request: z.string().nullable(),
  type: z.string().nullable(),
  updated: z.number().nullable(),
  updated_at: z.string(),
});

export const eventsInsertSchema = z.object({
  api_version: z.string().optional().nullable(),
  created: z.number().optional().nullable(),
  data: jsonSchema.optional().nullable(),
  id: z.string(),
  livemode: z.boolean().optional().nullable(),
  object: z.string().optional().nullable(),
  pending_webhooks: z.number().optional().nullable(),
  request: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  updated: z.number().optional().nullable(),
  updated_at: z.string().optional(),
});

export const eventsUpdateSchema = z.object({
  api_version: z.string().optional().nullable(),
  created: z.number().optional().nullable(),
  data: jsonSchema.optional().nullable(),
  id: z.string().optional(),
  livemode: z.boolean().optional().nullable(),
  object: z.string().optional().nullable(),
  pending_webhooks: z.number().optional().nullable(),
  request: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  updated: z.number().optional().nullable(),
  updated_at: z.string().optional(),
});

export const invoicesRowSchema = z.object({
  account_country: z.string().nullable(),
  account_name: z.string().nullable(),
  account_tax_ids: jsonSchema.nullable(),
  amount_due: z.number().nullable(),
  amount_paid: z.number().nullable(),
  amount_remaining: z.number().nullable(),
  application_fee_amount: z.number().nullable(),
  attempt_count: z.number().nullable(),
  attempted: z.boolean().nullable(),
  auto_advance: z.boolean().nullable(),
  billing_reason: z.string().nullable(),
  charge: z.string().nullable(),
  collection_method: z.string().nullable(),
  created: z.number().nullable(),
  currency: z.string().nullable(),
  custom_fields: jsonSchema.nullable(),
  customer: z.string().nullable(),
  customer_address: jsonSchema.nullable(),
  customer_email: z.string().nullable(),
  customer_name: z.string().nullable(),
  customer_phone: z.string().nullable(),
  customer_shipping: jsonSchema.nullable(),
  customer_tax_exempt: z.string().nullable(),
  customer_tax_ids: jsonSchema.nullable(),
  default_payment_method: z.string().nullable(),
  default_source: z.string().nullable(),
  default_tax_rates: jsonSchema.nullable(),
  description: z.string().nullable(),
  discount: jsonSchema.nullable(),
  discounts: jsonSchema.nullable(),
  due_date: z.number().nullable(),
  ending_balance: z.number().nullable(),
  footer: z.string().nullable(),
  hosted_invoice_url: z.string().nullable(),
  id: z.string(),
  invoice_pdf: z.string().nullable(),
  last_finalization_error: jsonSchema.nullable(),
  lines: jsonSchema.nullable(),
  livemode: z.boolean().nullable(),
  metadata: jsonSchema.nullable(),
  next_payment_attempt: z.number().nullable(),
  number: z.string().nullable(),
  object: z.string().nullable(),
  on_behalf_of: z.string().nullable(),
  paid: z.boolean().nullable(),
  payment_intent: z.string().nullable(),
  payment_settings: jsonSchema.nullable(),
  period_end: z.number().nullable(),
  period_start: z.number().nullable(),
  post_payment_credit_notes_amount: z.number().nullable(),
  pre_payment_credit_notes_amount: z.number().nullable(),
  receipt_number: z.string().nullable(),
  starting_balance: z.number().nullable(),
  statement_descriptor: z.string().nullable(),
  status: stripeInvoiceStatusSchema.nullable(),
  status_transitions: jsonSchema.nullable(),
  subscription: z.string().nullable(),
  subtotal: z.number().nullable(),
  tax: z.number().nullable(),
  total: z.number().nullable(),
  total_discount_amounts: jsonSchema.nullable(),
  total_tax_amounts: jsonSchema.nullable(),
  transfer_data: jsonSchema.nullable(),
  updated_at: z.string(),
  webhooks_delivered_at: z.number().nullable(),
});

export const invoicesInsertSchema = z.object({
  account_country: z.string().optional().nullable(),
  account_name: z.string().optional().nullable(),
  account_tax_ids: jsonSchema.optional().nullable(),
  amount_due: z.number().optional().nullable(),
  amount_paid: z.number().optional().nullable(),
  amount_remaining: z.number().optional().nullable(),
  application_fee_amount: z.number().optional().nullable(),
  attempt_count: z.number().optional().nullable(),
  attempted: z.boolean().optional().nullable(),
  auto_advance: z.boolean().optional().nullable(),
  billing_reason: z.string().optional().nullable(),
  charge: z.string().optional().nullable(),
  collection_method: z.string().optional().nullable(),
  created: z.number().optional().nullable(),
  currency: z.string().optional().nullable(),
  custom_fields: jsonSchema.optional().nullable(),
  customer: z.string().optional().nullable(),
  customer_address: jsonSchema.optional().nullable(),
  customer_email: z.string().optional().nullable(),
  customer_name: z.string().optional().nullable(),
  customer_phone: z.string().optional().nullable(),
  customer_shipping: jsonSchema.optional().nullable(),
  customer_tax_exempt: z.string().optional().nullable(),
  customer_tax_ids: jsonSchema.optional().nullable(),
  default_payment_method: z.string().optional().nullable(),
  default_source: z.string().optional().nullable(),
  default_tax_rates: jsonSchema.optional().nullable(),
  description: z.string().optional().nullable(),
  discount: jsonSchema.optional().nullable(),
  discounts: jsonSchema.optional().nullable(),
  due_date: z.number().optional().nullable(),
  ending_balance: z.number().optional().nullable(),
  footer: z.string().optional().nullable(),
  hosted_invoice_url: z.string().optional().nullable(),
  id: z.string(),
  invoice_pdf: z.string().optional().nullable(),
  last_finalization_error: jsonSchema.optional().nullable(),
  lines: jsonSchema.optional().nullable(),
  livemode: z.boolean().optional().nullable(),
  metadata: jsonSchema.optional().nullable(),
  next_payment_attempt: z.number().optional().nullable(),
  number: z.string().optional().nullable(),
  object: z.string().optional().nullable(),
  on_behalf_of: z.string().optional().nullable(),
  paid: z.boolean().optional().nullable(),
  payment_intent: z.string().optional().nullable(),
  payment_settings: jsonSchema.optional().nullable(),
  period_end: z.number().optional().nullable(),
  period_start: z.number().optional().nullable(),
  post_payment_credit_notes_amount: z.number().optional().nullable(),
  pre_payment_credit_notes_amount: z.number().optional().nullable(),
  receipt_number: z.string().optional().nullable(),
  starting_balance: z.number().optional().nullable(),
  statement_descriptor: z.string().optional().nullable(),
  status: stripeInvoiceStatusSchema.optional().nullable(),
  status_transitions: jsonSchema.optional().nullable(),
  subscription: z.string().optional().nullable(),
  subtotal: z.number().optional().nullable(),
  tax: z.number().optional().nullable(),
  total: z.number().optional().nullable(),
  total_discount_amounts: jsonSchema.optional().nullable(),
  total_tax_amounts: jsonSchema.optional().nullable(),
  transfer_data: jsonSchema.optional().nullable(),
  updated_at: z.string().optional(),
  webhooks_delivered_at: z.number().optional().nullable(),
});

export const invoicesUpdateSchema = z.object({
  account_country: z.string().optional().nullable(),
  account_name: z.string().optional().nullable(),
  account_tax_ids: jsonSchema.optional().nullable(),
  amount_due: z.number().optional().nullable(),
  amount_paid: z.number().optional().nullable(),
  amount_remaining: z.number().optional().nullable(),
  application_fee_amount: z.number().optional().nullable(),
  attempt_count: z.number().optional().nullable(),
  attempted: z.boolean().optional().nullable(),
  auto_advance: z.boolean().optional().nullable(),
  billing_reason: z.string().optional().nullable(),
  charge: z.string().optional().nullable(),
  collection_method: z.string().optional().nullable(),
  created: z.number().optional().nullable(),
  currency: z.string().optional().nullable(),
  custom_fields: jsonSchema.optional().nullable(),
  customer: z.string().optional().nullable(),
  customer_address: jsonSchema.optional().nullable(),
  customer_email: z.string().optional().nullable(),
  customer_name: z.string().optional().nullable(),
  customer_phone: z.string().optional().nullable(),
  customer_shipping: jsonSchema.optional().nullable(),
  customer_tax_exempt: z.string().optional().nullable(),
  customer_tax_ids: jsonSchema.optional().nullable(),
  default_payment_method: z.string().optional().nullable(),
  default_source: z.string().optional().nullable(),
  default_tax_rates: jsonSchema.optional().nullable(),
  description: z.string().optional().nullable(),
  discount: jsonSchema.optional().nullable(),
  discounts: jsonSchema.optional().nullable(),
  due_date: z.number().optional().nullable(),
  ending_balance: z.number().optional().nullable(),
  footer: z.string().optional().nullable(),
  hosted_invoice_url: z.string().optional().nullable(),
  id: z.string().optional(),
  invoice_pdf: z.string().optional().nullable(),
  last_finalization_error: jsonSchema.optional().nullable(),
  lines: jsonSchema.optional().nullable(),
  livemode: z.boolean().optional().nullable(),
  metadata: jsonSchema.optional().nullable(),
  next_payment_attempt: z.number().optional().nullable(),
  number: z.string().optional().nullable(),
  object: z.string().optional().nullable(),
  on_behalf_of: z.string().optional().nullable(),
  paid: z.boolean().optional().nullable(),
  payment_intent: z.string().optional().nullable(),
  payment_settings: jsonSchema.optional().nullable(),
  period_end: z.number().optional().nullable(),
  period_start: z.number().optional().nullable(),
  post_payment_credit_notes_amount: z.number().optional().nullable(),
  pre_payment_credit_notes_amount: z.number().optional().nullable(),
  receipt_number: z.string().optional().nullable(),
  starting_balance: z.number().optional().nullable(),
  statement_descriptor: z.string().optional().nullable(),
  status: stripeInvoiceStatusSchema.optional().nullable(),
  status_transitions: jsonSchema.optional().nullable(),
  subscription: z.string().optional().nullable(),
  subtotal: z.number().optional().nullable(),
  tax: z.number().optional().nullable(),
  total: z.number().optional().nullable(),
  total_discount_amounts: jsonSchema.optional().nullable(),
  total_tax_amounts: jsonSchema.optional().nullable(),
  transfer_data: jsonSchema.optional().nullable(),
  updated_at: z.string().optional(),
  webhooks_delivered_at: z.number().optional().nullable(),
});

export const invoicesRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("invoices_customer_fkey"),
    columns: z.tuple([z.literal("customer")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("customers"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("invoices_subscription_fkey"),
    columns: z.tuple([z.literal("subscription")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("subscriptions"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const migrationsRowSchema = z.object({
  executed_at: z.string().nullable(),
  hash: z.string(),
  id: z.number(),
  name: z.string(),
});

export const migrationsInsertSchema = z.object({
  executed_at: z.string().optional().nullable(),
  hash: z.string(),
  id: z.number(),
  name: z.string(),
});

export const migrationsUpdateSchema = z.object({
  executed_at: z.string().optional().nullable(),
  hash: z.string().optional(),
  id: z.number().optional(),
  name: z.string().optional(),
});

export const paymentIntentsRowSchema = z.object({
  amount: z.number().nullable(),
  amount_capturable: z.number().nullable(),
  amount_details: jsonSchema.nullable(),
  amount_received: z.number().nullable(),
  application: z.string().nullable(),
  application_fee_amount: z.number().nullable(),
  automatic_payment_methods: z.string().nullable(),
  canceled_at: z.number().nullable(),
  cancellation_reason: z.string().nullable(),
  capture_method: z.string().nullable(),
  client_secret: z.string().nullable(),
  confirmation_method: z.string().nullable(),
  created: z.number().nullable(),
  currency: z.string().nullable(),
  customer: z.string().nullable(),
  description: z.string().nullable(),
  id: z.string(),
  invoice: z.string().nullable(),
  last_payment_error: z.string().nullable(),
  livemode: z.boolean().nullable(),
  metadata: jsonSchema.nullable(),
  next_action: z.string().nullable(),
  object: z.string().nullable(),
  on_behalf_of: z.string().nullable(),
  payment_method: z.string().nullable(),
  payment_method_options: jsonSchema.nullable(),
  payment_method_types: jsonSchema.nullable(),
  processing: z.string().nullable(),
  receipt_email: z.string().nullable(),
  review: z.string().nullable(),
  setup_future_usage: z.string().nullable(),
  shipping: jsonSchema.nullable(),
  statement_descriptor: z.string().nullable(),
  statement_descriptor_suffix: z.string().nullable(),
  status: z.string().nullable(),
  transfer_data: jsonSchema.nullable(),
  transfer_group: z.string().nullable(),
});

export const paymentIntentsInsertSchema = z.object({
  amount: z.number().optional().nullable(),
  amount_capturable: z.number().optional().nullable(),
  amount_details: jsonSchema.optional().nullable(),
  amount_received: z.number().optional().nullable(),
  application: z.string().optional().nullable(),
  application_fee_amount: z.number().optional().nullable(),
  automatic_payment_methods: z.string().optional().nullable(),
  canceled_at: z.number().optional().nullable(),
  cancellation_reason: z.string().optional().nullable(),
  capture_method: z.string().optional().nullable(),
  client_secret: z.string().optional().nullable(),
  confirmation_method: z.string().optional().nullable(),
  created: z.number().optional().nullable(),
  currency: z.string().optional().nullable(),
  customer: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  id: z.string(),
  invoice: z.string().optional().nullable(),
  last_payment_error: z.string().optional().nullable(),
  livemode: z.boolean().optional().nullable(),
  metadata: jsonSchema.optional().nullable(),
  next_action: z.string().optional().nullable(),
  object: z.string().optional().nullable(),
  on_behalf_of: z.string().optional().nullable(),
  payment_method: z.string().optional().nullable(),
  payment_method_options: jsonSchema.optional().nullable(),
  payment_method_types: jsonSchema.optional().nullable(),
  processing: z.string().optional().nullable(),
  receipt_email: z.string().optional().nullable(),
  review: z.string().optional().nullable(),
  setup_future_usage: z.string().optional().nullable(),
  shipping: jsonSchema.optional().nullable(),
  statement_descriptor: z.string().optional().nullable(),
  statement_descriptor_suffix: z.string().optional().nullable(),
  status: z.string().optional().nullable(),
  transfer_data: jsonSchema.optional().nullable(),
  transfer_group: z.string().optional().nullable(),
});

export const paymentIntentsUpdateSchema = z.object({
  amount: z.number().optional().nullable(),
  amount_capturable: z.number().optional().nullable(),
  amount_details: jsonSchema.optional().nullable(),
  amount_received: z.number().optional().nullable(),
  application: z.string().optional().nullable(),
  application_fee_amount: z.number().optional().nullable(),
  automatic_payment_methods: z.string().optional().nullable(),
  canceled_at: z.number().optional().nullable(),
  cancellation_reason: z.string().optional().nullable(),
  capture_method: z.string().optional().nullable(),
  client_secret: z.string().optional().nullable(),
  confirmation_method: z.string().optional().nullable(),
  created: z.number().optional().nullable(),
  currency: z.string().optional().nullable(),
  customer: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  invoice: z.string().optional().nullable(),
  last_payment_error: z.string().optional().nullable(),
  livemode: z.boolean().optional().nullable(),
  metadata: jsonSchema.optional().nullable(),
  next_action: z.string().optional().nullable(),
  object: z.string().optional().nullable(),
  on_behalf_of: z.string().optional().nullable(),
  payment_method: z.string().optional().nullable(),
  payment_method_options: jsonSchema.optional().nullable(),
  payment_method_types: jsonSchema.optional().nullable(),
  processing: z.string().optional().nullable(),
  receipt_email: z.string().optional().nullable(),
  review: z.string().optional().nullable(),
  setup_future_usage: z.string().optional().nullable(),
  shipping: jsonSchema.optional().nullable(),
  statement_descriptor: z.string().optional().nullable(),
  statement_descriptor_suffix: z.string().optional().nullable(),
  status: z.string().optional().nullable(),
  transfer_data: jsonSchema.optional().nullable(),
  transfer_group: z.string().optional().nullable(),
});

export const paymentMethodsRowSchema = z.object({
  billing_details: jsonSchema.nullable(),
  card: jsonSchema.nullable(),
  created: z.number().nullable(),
  customer: z.string().nullable(),
  id: z.string(),
  metadata: jsonSchema.nullable(),
  object: z.string().nullable(),
  type: z.string().nullable(),
});

export const paymentMethodsInsertSchema = z.object({
  billing_details: jsonSchema.optional().nullable(),
  card: jsonSchema.optional().nullable(),
  created: z.number().optional().nullable(),
  customer: z.string().optional().nullable(),
  id: z.string(),
  metadata: jsonSchema.optional().nullable(),
  object: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
});

export const paymentMethodsUpdateSchema = z.object({
  billing_details: jsonSchema.optional().nullable(),
  card: jsonSchema.optional().nullable(),
  created: z.number().optional().nullable(),
  customer: z.string().optional().nullable(),
  id: z.string().optional(),
  metadata: jsonSchema.optional().nullable(),
  object: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
});

export const payoutsRowSchema = z.object({
  amount: z.number().nullable(),
  amount_reversed: z.number().nullable(),
  arrival_date: z.string().nullable(),
  automatic: z.boolean().nullable(),
  balance_transaction: z.string().nullable(),
  bank_account: jsonSchema.nullable(),
  created: z.number().nullable(),
  currency: z.string().nullable(),
  date: z.string().nullable(),
  description: z.string().nullable(),
  destination: z.string().nullable(),
  failure_balance_transaction: z.string().nullable(),
  failure_code: z.string().nullable(),
  failure_message: z.string().nullable(),
  id: z.string(),
  livemode: z.boolean().nullable(),
  metadata: jsonSchema.nullable(),
  method: z.string().nullable(),
  object: z.string().nullable(),
  recipient: z.string().nullable(),
  source_transaction: z.string().nullable(),
  source_type: z.string().nullable(),
  statement_description: z.string().nullable(),
  statement_descriptor: z.string().nullable(),
  status: z.string().nullable(),
  transfer_group: z.string().nullable(),
  type: z.string().nullable(),
  updated: z.number().nullable(),
  updated_at: z.string(),
});

export const payoutsInsertSchema = z.object({
  amount: z.number().optional().nullable(),
  amount_reversed: z.number().optional().nullable(),
  arrival_date: z.string().optional().nullable(),
  automatic: z.boolean().optional().nullable(),
  balance_transaction: z.string().optional().nullable(),
  bank_account: jsonSchema.optional().nullable(),
  created: z.number().optional().nullable(),
  currency: z.string().optional().nullable(),
  date: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  destination: z.string().optional().nullable(),
  failure_balance_transaction: z.string().optional().nullable(),
  failure_code: z.string().optional().nullable(),
  failure_message: z.string().optional().nullable(),
  id: z.string(),
  livemode: z.boolean().optional().nullable(),
  metadata: jsonSchema.optional().nullable(),
  method: z.string().optional().nullable(),
  object: z.string().optional().nullable(),
  recipient: z.string().optional().nullable(),
  source_transaction: z.string().optional().nullable(),
  source_type: z.string().optional().nullable(),
  statement_description: z.string().optional().nullable(),
  statement_descriptor: z.string().optional().nullable(),
  status: z.string().optional().nullable(),
  transfer_group: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  updated: z.number().optional().nullable(),
  updated_at: z.string().optional(),
});

export const payoutsUpdateSchema = z.object({
  amount: z.number().optional().nullable(),
  amount_reversed: z.number().optional().nullable(),
  arrival_date: z.string().optional().nullable(),
  automatic: z.boolean().optional().nullable(),
  balance_transaction: z.string().optional().nullable(),
  bank_account: jsonSchema.optional().nullable(),
  created: z.number().optional().nullable(),
  currency: z.string().optional().nullable(),
  date: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  destination: z.string().optional().nullable(),
  failure_balance_transaction: z.string().optional().nullable(),
  failure_code: z.string().optional().nullable(),
  failure_message: z.string().optional().nullable(),
  id: z.string().optional(),
  livemode: z.boolean().optional().nullable(),
  metadata: jsonSchema.optional().nullable(),
  method: z.string().optional().nullable(),
  object: z.string().optional().nullable(),
  recipient: z.string().optional().nullable(),
  source_transaction: z.string().optional().nullable(),
  source_type: z.string().optional().nullable(),
  statement_description: z.string().optional().nullable(),
  statement_descriptor: z.string().optional().nullable(),
  status: z.string().optional().nullable(),
  transfer_group: z.string().optional().nullable(),
  type: z.string().optional().nullable(),
  updated: z.number().optional().nullable(),
  updated_at: z.string().optional(),
});

export const plansRowSchema = z.object({
  active: z.boolean().nullable(),
  aggregate_usage: z.string().nullable(),
  amount: z.number().nullable(),
  billing_scheme: z.string().nullable(),
  created: z.number().nullable(),
  currency: z.string().nullable(),
  id: z.string(),
  interval: z.string().nullable(),
  interval_count: z.number().nullable(),
  livemode: z.boolean().nullable(),
  metadata: jsonSchema.nullable(),
  nickname: z.string().nullable(),
  object: z.string().nullable(),
  product: z.string().nullable(),
  tiers_mode: z.string().nullable(),
  transform_usage: z.string().nullable(),
  trial_period_days: z.number().nullable(),
  updated_at: z.string(),
  usage_type: z.string().nullable(),
});

export const plansInsertSchema = z.object({
  active: z.boolean().optional().nullable(),
  aggregate_usage: z.string().optional().nullable(),
  amount: z.number().optional().nullable(),
  billing_scheme: z.string().optional().nullable(),
  created: z.number().optional().nullable(),
  currency: z.string().optional().nullable(),
  id: z.string(),
  interval: z.string().optional().nullable(),
  interval_count: z.number().optional().nullable(),
  livemode: z.boolean().optional().nullable(),
  metadata: jsonSchema.optional().nullable(),
  nickname: z.string().optional().nullable(),
  object: z.string().optional().nullable(),
  product: z.string().optional().nullable(),
  tiers_mode: z.string().optional().nullable(),
  transform_usage: z.string().optional().nullable(),
  trial_period_days: z.number().optional().nullable(),
  updated_at: z.string().optional(),
  usage_type: z.string().optional().nullable(),
});

export const plansUpdateSchema = z.object({
  active: z.boolean().optional().nullable(),
  aggregate_usage: z.string().optional().nullable(),
  amount: z.number().optional().nullable(),
  billing_scheme: z.string().optional().nullable(),
  created: z.number().optional().nullable(),
  currency: z.string().optional().nullable(),
  id: z.string().optional(),
  interval: z.string().optional().nullable(),
  interval_count: z.number().optional().nullable(),
  livemode: z.boolean().optional().nullable(),
  metadata: jsonSchema.optional().nullable(),
  nickname: z.string().optional().nullable(),
  object: z.string().optional().nullable(),
  product: z.string().optional().nullable(),
  tiers_mode: z.string().optional().nullable(),
  transform_usage: z.string().optional().nullable(),
  trial_period_days: z.number().optional().nullable(),
  updated_at: z.string().optional(),
  usage_type: z.string().optional().nullable(),
});

export const pricesRowSchema = z.object({
  active: z.boolean().nullable(),
  billing_scheme: z.string().nullable(),
  created: z.number().nullable(),
  currency: z.string().nullable(),
  id: z.string(),
  livemode: z.boolean().nullable(),
  lookup_key: z.string().nullable(),
  metadata: jsonSchema.nullable(),
  nickname: z.string().nullable(),
  object: z.string().nullable(),
  product: z.string().nullable(),
  recurring: jsonSchema.nullable(),
  tiers_mode: stripePricingTiersSchema.nullable(),
  transform_quantity: jsonSchema.nullable(),
  type: stripePricingTypeSchema.nullable(),
  unit_amount: z.number().nullable(),
  unit_amount_decimal: z.string().nullable(),
  updated_at: z.string(),
});

export const pricesInsertSchema = z.object({
  active: z.boolean().optional().nullable(),
  billing_scheme: z.string().optional().nullable(),
  created: z.number().optional().nullable(),
  currency: z.string().optional().nullable(),
  id: z.string(),
  livemode: z.boolean().optional().nullable(),
  lookup_key: z.string().optional().nullable(),
  metadata: jsonSchema.optional().nullable(),
  nickname: z.string().optional().nullable(),
  object: z.string().optional().nullable(),
  product: z.string().optional().nullable(),
  recurring: jsonSchema.optional().nullable(),
  tiers_mode: stripePricingTiersSchema.optional().nullable(),
  transform_quantity: jsonSchema.optional().nullable(),
  type: stripePricingTypeSchema.optional().nullable(),
  unit_amount: z.number().optional().nullable(),
  unit_amount_decimal: z.string().optional().nullable(),
  updated_at: z.string().optional(),
});

export const pricesUpdateSchema = z.object({
  active: z.boolean().optional().nullable(),
  billing_scheme: z.string().optional().nullable(),
  created: z.number().optional().nullable(),
  currency: z.string().optional().nullable(),
  id: z.string().optional(),
  livemode: z.boolean().optional().nullable(),
  lookup_key: z.string().optional().nullable(),
  metadata: jsonSchema.optional().nullable(),
  nickname: z.string().optional().nullable(),
  object: z.string().optional().nullable(),
  product: z.string().optional().nullable(),
  recurring: jsonSchema.optional().nullable(),
  tiers_mode: stripePricingTiersSchema.optional().nullable(),
  transform_quantity: jsonSchema.optional().nullable(),
  type: stripePricingTypeSchema.optional().nullable(),
  unit_amount: z.number().optional().nullable(),
  unit_amount_decimal: z.string().optional().nullable(),
  updated_at: z.string().optional(),
});

export const pricesRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("prices_product_fkey"),
    columns: z.tuple([z.literal("product")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("products"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const productsRowSchema = z.object({
  active: z.boolean().nullable(),
  created: z.number().nullable(),
  default_price: z.string().nullable(),
  description: z.string().nullable(),
  id: z.string(),
  images: jsonSchema.nullable(),
  livemode: z.boolean().nullable(),
  marketing_features: jsonSchema.nullable(),
  metadata: jsonSchema.nullable(),
  name: z.string().nullable(),
  object: z.string().nullable(),
  package_dimensions: jsonSchema.nullable(),
  shippable: z.boolean().nullable(),
  statement_descriptor: z.string().nullable(),
  unit_label: z.string().nullable(),
  updated: z.number().nullable(),
  updated_at: z.string(),
  url: z.string().nullable(),
});

export const productsInsertSchema = z.object({
  active: z.boolean().optional().nullable(),
  created: z.number().optional().nullable(),
  default_price: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  id: z.string(),
  images: jsonSchema.optional().nullable(),
  livemode: z.boolean().optional().nullable(),
  marketing_features: jsonSchema.optional().nullable(),
  metadata: jsonSchema.optional().nullable(),
  name: z.string().optional().nullable(),
  object: z.string().optional().nullable(),
  package_dimensions: jsonSchema.optional().nullable(),
  shippable: z.boolean().optional().nullable(),
  statement_descriptor: z.string().optional().nullable(),
  unit_label: z.string().optional().nullable(),
  updated: z.number().optional().nullable(),
  updated_at: z.string().optional(),
  url: z.string().optional().nullable(),
});

export const productsUpdateSchema = z.object({
  active: z.boolean().optional().nullable(),
  created: z.number().optional().nullable(),
  default_price: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  images: jsonSchema.optional().nullable(),
  livemode: z.boolean().optional().nullable(),
  marketing_features: jsonSchema.optional().nullable(),
  metadata: jsonSchema.optional().nullable(),
  name: z.string().optional().nullable(),
  object: z.string().optional().nullable(),
  package_dimensions: jsonSchema.optional().nullable(),
  shippable: z.boolean().optional().nullable(),
  statement_descriptor: z.string().optional().nullable(),
  unit_label: z.string().optional().nullable(),
  updated: z.number().optional().nullable(),
  updated_at: z.string().optional(),
  url: z.string().optional().nullable(),
});

export const refundsRowSchema = z.object({
  amount: z.number().nullable(),
  balance_transaction: z.string().nullable(),
  charge: z.string().nullable(),
  created: z.number().nullable(),
  currency: z.string().nullable(),
  destination_details: jsonSchema.nullable(),
  id: z.string(),
  metadata: jsonSchema.nullable(),
  object: z.string().nullable(),
  payment_intent: z.string().nullable(),
  reason: z.string().nullable(),
  receipt_number: z.string().nullable(),
  source_transfer_reversal: z.string().nullable(),
  status: z.string().nullable(),
  transfer_reversal: z.string().nullable(),
  updated_at: z.string(),
});

export const refundsInsertSchema = z.object({
  amount: z.number().optional().nullable(),
  balance_transaction: z.string().optional().nullable(),
  charge: z.string().optional().nullable(),
  created: z.number().optional().nullable(),
  currency: z.string().optional().nullable(),
  destination_details: jsonSchema.optional().nullable(),
  id: z.string(),
  metadata: jsonSchema.optional().nullable(),
  object: z.string().optional().nullable(),
  payment_intent: z.string().optional().nullable(),
  reason: z.string().optional().nullable(),
  receipt_number: z.string().optional().nullable(),
  source_transfer_reversal: z.string().optional().nullable(),
  status: z.string().optional().nullable(),
  transfer_reversal: z.string().optional().nullable(),
  updated_at: z.string().optional(),
});

export const refundsUpdateSchema = z.object({
  amount: z.number().optional().nullable(),
  balance_transaction: z.string().optional().nullable(),
  charge: z.string().optional().nullable(),
  created: z.number().optional().nullable(),
  currency: z.string().optional().nullable(),
  destination_details: jsonSchema.optional().nullable(),
  id: z.string().optional(),
  metadata: jsonSchema.optional().nullable(),
  object: z.string().optional().nullable(),
  payment_intent: z.string().optional().nullable(),
  reason: z.string().optional().nullable(),
  receipt_number: z.string().optional().nullable(),
  source_transfer_reversal: z.string().optional().nullable(),
  status: z.string().optional().nullable(),
  transfer_reversal: z.string().optional().nullable(),
  updated_at: z.string().optional(),
});

export const setupIntentsRowSchema = z.object({
  cancellation_reason: z.string().nullable(),
  created: z.number().nullable(),
  customer: z.string().nullable(),
  description: z.string().nullable(),
  id: z.string(),
  latest_attempt: z.string().nullable(),
  mandate: z.string().nullable(),
  object: z.string().nullable(),
  on_behalf_of: z.string().nullable(),
  payment_method: z.string().nullable(),
  single_use_mandate: z.string().nullable(),
  status: z.string().nullable(),
  usage: z.string().nullable(),
});

export const setupIntentsInsertSchema = z.object({
  cancellation_reason: z.string().optional().nullable(),
  created: z.number().optional().nullable(),
  customer: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  id: z.string(),
  latest_attempt: z.string().optional().nullable(),
  mandate: z.string().optional().nullable(),
  object: z.string().optional().nullable(),
  on_behalf_of: z.string().optional().nullable(),
  payment_method: z.string().optional().nullable(),
  single_use_mandate: z.string().optional().nullable(),
  status: z.string().optional().nullable(),
  usage: z.string().optional().nullable(),
});

export const setupIntentsUpdateSchema = z.object({
  cancellation_reason: z.string().optional().nullable(),
  created: z.number().optional().nullable(),
  customer: z.string().optional().nullable(),
  description: z.string().optional().nullable(),
  id: z.string().optional(),
  latest_attempt: z.string().optional().nullable(),
  mandate: z.string().optional().nullable(),
  object: z.string().optional().nullable(),
  on_behalf_of: z.string().optional().nullable(),
  payment_method: z.string().optional().nullable(),
  single_use_mandate: z.string().optional().nullable(),
  status: z.string().optional().nullable(),
  usage: z.string().optional().nullable(),
});

export const subscriptionItemsRowSchema = z.object({
  billing_thresholds: jsonSchema.nullable(),
  created: z.number().nullable(),
  deleted: z.boolean().nullable(),
  id: z.string(),
  metadata: jsonSchema.nullable(),
  object: z.string().nullable(),
  price: z.string().nullable(),
  quantity: z.number().nullable(),
  subscription: z.string().nullable(),
  tax_rates: jsonSchema.nullable(),
});

export const subscriptionItemsInsertSchema = z.object({
  billing_thresholds: jsonSchema.optional().nullable(),
  created: z.number().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  id: z.string(),
  metadata: jsonSchema.optional().nullable(),
  object: z.string().optional().nullable(),
  price: z.string().optional().nullable(),
  quantity: z.number().optional().nullable(),
  subscription: z.string().optional().nullable(),
  tax_rates: jsonSchema.optional().nullable(),
});

export const subscriptionItemsUpdateSchema = z.object({
  billing_thresholds: jsonSchema.optional().nullable(),
  created: z.number().optional().nullable(),
  deleted: z.boolean().optional().nullable(),
  id: z.string().optional(),
  metadata: jsonSchema.optional().nullable(),
  object: z.string().optional().nullable(),
  price: z.string().optional().nullable(),
  quantity: z.number().optional().nullable(),
  subscription: z.string().optional().nullable(),
  tax_rates: jsonSchema.optional().nullable(),
});

export const subscriptionItemsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("subscription_items_price_fkey"),
    columns: z.tuple([z.literal("price")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("prices"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("subscription_items_subscription_fkey"),
    columns: z.tuple([z.literal("subscription")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("subscriptions"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const subscriptionSchedulesRowSchema = z.object({
  application: z.string().nullable(),
  canceled_at: z.number().nullable(),
  completed_at: z.number().nullable(),
  created: z.number(),
  current_phase: jsonSchema.nullable(),
  customer: z.string(),
  default_settings: jsonSchema.nullable(),
  end_behavior: z.string().nullable(),
  id: z.string(),
  livemode: z.boolean(),
  metadata: jsonSchema,
  object: z.string().nullable(),
  phases: jsonSchema,
  released_at: z.number().nullable(),
  released_subscription: z.string().nullable(),
  status: stripeSubscriptionScheduleStatusSchema,
  subscription: z.string().nullable(),
  test_clock: z.string().nullable(),
});

export const subscriptionSchedulesInsertSchema = z.object({
  application: z.string().optional().nullable(),
  canceled_at: z.number().optional().nullable(),
  completed_at: z.number().optional().nullable(),
  created: z.number(),
  current_phase: jsonSchema.optional().nullable(),
  customer: z.string(),
  default_settings: jsonSchema.optional().nullable(),
  end_behavior: z.string().optional().nullable(),
  id: z.string(),
  livemode: z.boolean(),
  metadata: jsonSchema,
  object: z.string().optional().nullable(),
  phases: jsonSchema,
  released_at: z.number().optional().nullable(),
  released_subscription: z.string().optional().nullable(),
  status: stripeSubscriptionScheduleStatusSchema,
  subscription: z.string().optional().nullable(),
  test_clock: z.string().optional().nullable(),
});

export const subscriptionSchedulesUpdateSchema = z.object({
  application: z.string().optional().nullable(),
  canceled_at: z.number().optional().nullable(),
  completed_at: z.number().optional().nullable(),
  created: z.number().optional(),
  current_phase: jsonSchema.optional().nullable(),
  customer: z.string().optional(),
  default_settings: jsonSchema.optional().nullable(),
  end_behavior: z.string().optional().nullable(),
  id: z.string().optional(),
  livemode: z.boolean().optional(),
  metadata: jsonSchema.optional(),
  object: z.string().optional().nullable(),
  phases: jsonSchema.optional(),
  released_at: z.number().optional().nullable(),
  released_subscription: z.string().optional().nullable(),
  status: stripeSubscriptionScheduleStatusSchema.optional(),
  subscription: z.string().optional().nullable(),
  test_clock: z.string().optional().nullable(),
});

export const subscriptionsRowSchema = z.object({
  application_fee_percent: z.number().nullable(),
  billing_cycle_anchor: z.number().nullable(),
  billing_thresholds: jsonSchema.nullable(),
  cancel_at: z.number().nullable(),
  cancel_at_period_end: z.boolean().nullable(),
  canceled_at: z.number().nullable(),
  collection_method: z.string().nullable(),
  created: z.number().nullable(),
  current_period_end: z.number().nullable(),
  current_period_start: z.number().nullable(),
  customer: z.string().nullable(),
  days_until_due: z.number().nullable(),
  default_payment_method: z.string().nullable(),
  default_source: z.string().nullable(),
  default_tax_rates: jsonSchema.nullable(),
  discount: jsonSchema.nullable(),
  ended_at: z.number().nullable(),
  id: z.string(),
  items: jsonSchema.nullable(),
  latest_invoice: z.string().nullable(),
  livemode: z.boolean().nullable(),
  metadata: jsonSchema.nullable(),
  next_pending_invoice_item_invoice: z.number().nullable(),
  object: z.string().nullable(),
  pause_collection: jsonSchema.nullable(),
  pending_invoice_item_interval: jsonSchema.nullable(),
  pending_setup_intent: z.string().nullable(),
  pending_update: jsonSchema.nullable(),
  plan: z.string().nullable(),
  schedule: z.string().nullable(),
  start_date: z.number().nullable(),
  status: stripeSubscriptionStatusSchema.nullable(),
  transfer_data: jsonSchema.nullable(),
  trial_end: jsonSchema.nullable(),
  trial_start: jsonSchema.nullable(),
  updated_at: z.string(),
});

export const subscriptionsInsertSchema = z.object({
  application_fee_percent: z.number().optional().nullable(),
  billing_cycle_anchor: z.number().optional().nullable(),
  billing_thresholds: jsonSchema.optional().nullable(),
  cancel_at: z.number().optional().nullable(),
  cancel_at_period_end: z.boolean().optional().nullable(),
  canceled_at: z.number().optional().nullable(),
  collection_method: z.string().optional().nullable(),
  created: z.number().optional().nullable(),
  current_period_end: z.number().optional().nullable(),
  current_period_start: z.number().optional().nullable(),
  customer: z.string().optional().nullable(),
  days_until_due: z.number().optional().nullable(),
  default_payment_method: z.string().optional().nullable(),
  default_source: z.string().optional().nullable(),
  default_tax_rates: jsonSchema.optional().nullable(),
  discount: jsonSchema.optional().nullable(),
  ended_at: z.number().optional().nullable(),
  id: z.string(),
  items: jsonSchema.optional().nullable(),
  latest_invoice: z.string().optional().nullable(),
  livemode: z.boolean().optional().nullable(),
  metadata: jsonSchema.optional().nullable(),
  next_pending_invoice_item_invoice: z.number().optional().nullable(),
  object: z.string().optional().nullable(),
  pause_collection: jsonSchema.optional().nullable(),
  pending_invoice_item_interval: jsonSchema.optional().nullable(),
  pending_setup_intent: z.string().optional().nullable(),
  pending_update: jsonSchema.optional().nullable(),
  plan: z.string().optional().nullable(),
  schedule: z.string().optional().nullable(),
  start_date: z.number().optional().nullable(),
  status: stripeSubscriptionStatusSchema.optional().nullable(),
  transfer_data: jsonSchema.optional().nullable(),
  trial_end: jsonSchema.optional().nullable(),
  trial_start: jsonSchema.optional().nullable(),
  updated_at: z.string().optional(),
});

export const subscriptionsUpdateSchema = z.object({
  application_fee_percent: z.number().optional().nullable(),
  billing_cycle_anchor: z.number().optional().nullable(),
  billing_thresholds: jsonSchema.optional().nullable(),
  cancel_at: z.number().optional().nullable(),
  cancel_at_period_end: z.boolean().optional().nullable(),
  canceled_at: z.number().optional().nullable(),
  collection_method: z.string().optional().nullable(),
  created: z.number().optional().nullable(),
  current_period_end: z.number().optional().nullable(),
  current_period_start: z.number().optional().nullable(),
  customer: z.string().optional().nullable(),
  days_until_due: z.number().optional().nullable(),
  default_payment_method: z.string().optional().nullable(),
  default_source: z.string().optional().nullable(),
  default_tax_rates: jsonSchema.optional().nullable(),
  discount: jsonSchema.optional().nullable(),
  ended_at: z.number().optional().nullable(),
  id: z.string().optional(),
  items: jsonSchema.optional().nullable(),
  latest_invoice: z.string().optional().nullable(),
  livemode: z.boolean().optional().nullable(),
  metadata: jsonSchema.optional().nullable(),
  next_pending_invoice_item_invoice: z.number().optional().nullable(),
  object: z.string().optional().nullable(),
  pause_collection: jsonSchema.optional().nullable(),
  pending_invoice_item_interval: jsonSchema.optional().nullable(),
  pending_setup_intent: z.string().optional().nullable(),
  pending_update: jsonSchema.optional().nullable(),
  plan: z.string().optional().nullable(),
  schedule: z.string().optional().nullable(),
  start_date: z.number().optional().nullable(),
  status: stripeSubscriptionStatusSchema.optional().nullable(),
  transfer_data: jsonSchema.optional().nullable(),
  trial_end: jsonSchema.optional().nullable(),
  trial_start: jsonSchema.optional().nullable(),
  updated_at: z.string().optional(),
});

export const subscriptionsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("subscriptions_customer_fkey"),
    columns: z.tuple([z.literal("customer")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("customers"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const taxIdsRowSchema = z.object({
  country: z.string().nullable(),
  created: z.number(),
  customer: z.string().nullable(),
  id: z.string(),
  livemode: z.boolean().nullable(),
  object: z.string().nullable(),
  owner: jsonSchema.nullable(),
  type: z.string().nullable(),
  value: z.string().nullable(),
});

export const taxIdsInsertSchema = z.object({
  country: z.string().optional().nullable(),
  created: z.number(),
  customer: z.string().optional().nullable(),
  id: z.string(),
  livemode: z.boolean().optional().nullable(),
  object: z.string().optional().nullable(),
  owner: jsonSchema.optional().nullable(),
  type: z.string().optional().nullable(),
  value: z.string().optional().nullable(),
});

export const taxIdsUpdateSchema = z.object({
  country: z.string().optional().nullable(),
  created: z.number().optional(),
  customer: z.string().optional().nullable(),
  id: z.string().optional(),
  livemode: z.boolean().optional().nullable(),
  object: z.string().optional().nullable(),
  owner: jsonSchema.optional().nullable(),
  type: z.string().optional().nullable(),
  value: z.string().optional().nullable(),
});
