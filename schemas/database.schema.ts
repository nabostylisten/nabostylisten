// Generated by ts-to-zod
import { z } from "zod";
import { Json } from "./../types/database.types";

export const jsonSchema: z.ZodSchema<Json> = z.lazy(() =>
  z
    .union([
      z.string(),
      z.number(),
      z.boolean(),
      z.record(z.union([jsonSchema, z.undefined()])),
      z.array(jsonSchema),
    ])
    .nullable(),
);

export const addressesRowSchema = z.object({
  city: z.string(),
  country: z.string(),
  created_at: z.string(),
  id: z.string(),
  is_home_address: z.boolean(),
  latitude: z.number().nullable(),
  longitude: z.number().nullable(),
  nickname: z.string().nullable(),
  postal_code: z.string(),
  street_address: z.string(),
  updated_at: z.string(),
  user_id: z.string(),
});

export const addressesInsertSchema = z.object({
  city: z.string(),
  country: z.string(),
  created_at: z.string().optional(),
  id: z.string().optional(),
  is_home_address: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  nickname: z.string().optional().nullable(),
  postal_code: z.string(),
  street_address: z.string(),
  updated_at: z.string().optional(),
  user_id: z.string(),
});

export const addressesUpdateSchema = z.object({
  city: z.string().optional(),
  country: z.string().optional(),
  created_at: z.string().optional(),
  id: z.string().optional(),
  is_home_address: z.boolean().optional(),
  latitude: z.number().optional().nullable(),
  longitude: z.number().optional().nullable(),
  nickname: z.string().optional().nullable(),
  postal_code: z.string().optional(),
  street_address: z.string().optional(),
  updated_at: z.string().optional(),
  user_id: z.string().optional(),
});

export const addressesRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("addresses_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const applicationStatusSchema = z.union([
  z.literal("applied"),
  z.literal("pending_info"),
  z.literal("rejected"),
  z.literal("approved"),
]);

export const applicationTypeSchema = z.union([
  z.literal("stylist"),
  z.literal("studio"),
]);

export const applicationsInsertSchema = z.object({
  application_status: applicationStatusSchema.optional(),
  application_type: applicationTypeSchema,
  created_at: z.string().optional(),
  id: z.string().optional(),
  user_id: z.string(),
});

export const applicationsUpdateSchema = z.object({
  application_status: applicationStatusSchema.optional(),
  application_type: applicationTypeSchema.optional(),
  created_at: z.string().optional(),
  id: z.string().optional(),
  user_id: z.string().optional(),
});

export const applicationsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("applications_user_id_fkey"),
    columns: z.tuple([z.literal("user_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const bookingStatusSchema = z.union([
  z.literal("pending"),
  z.literal("confirmed"),
  z.literal("cancelled"),
  z.literal("completed"),
]);

export const bookingsInsertSchema = z.object({
  address_id: z.string().optional().nullable(),
  created_at: z.string().optional(),
  customer_id: z.string(),
  end_time: z.string(),
  id: z.string().optional(),
  message_to_stylist: z.string().optional().nullable(),
  service_id: z.string(),
  start_time: z.string(),
  status: bookingStatusSchema.optional(),
  stripe_payment_intent_id: z.string().optional().nullable(),
  stripe_payment_status: z.string().optional().nullable(),
  stylist_id: z.string(),
  updated_at: z.string().optional(),
});

export const bookingsUpdateSchema = z.object({
  address_id: z.string().optional().nullable(),
  created_at: z.string().optional(),
  customer_id: z.string().optional(),
  end_time: z.string().optional(),
  id: z.string().optional(),
  message_to_stylist: z.string().optional().nullable(),
  service_id: z.string().optional(),
  start_time: z.string().optional(),
  status: bookingStatusSchema.optional(),
  stripe_payment_intent_id: z.string().optional().nullable(),
  stripe_payment_status: z.string().optional().nullable(),
  stylist_id: z.string().optional(),
  updated_at: z.string().optional(),
});

export const bookingsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("bookings_address_id_fkey"),
    columns: z.tuple([z.literal("address_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("addresses"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("bookings_customer_id_fkey"),
    columns: z.tuple([z.literal("customer_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("bookings_service_id_fkey"),
    columns: z.tuple([z.literal("service_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("services"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("bookings_stylist_id_fkey"),
    columns: z.tuple([z.literal("stylist_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const chatMessagesRowSchema = z.object({
  chat_id: z.string(),
  content: z.string(),
  created_at: z.string(),
  id: z.string(),
  is_read: z.boolean(),
  sender_id: z.string(),
});

export const chatMessagesInsertSchema = z.object({
  chat_id: z.string(),
  content: z.string(),
  created_at: z.string().optional(),
  id: z.string().optional(),
  is_read: z.boolean().optional(),
  sender_id: z.string(),
});

export const chatMessagesUpdateSchema = z.object({
  chat_id: z.string().optional(),
  content: z.string().optional(),
  created_at: z.string().optional(),
  id: z.string().optional(),
  is_read: z.boolean().optional(),
  sender_id: z.string().optional(),
});

export const chatMessagesRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("chat_messages_chat_id_fkey"),
    columns: z.tuple([z.literal("chat_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("chats"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("chat_messages_sender_id_fkey"),
    columns: z.tuple([z.literal("sender_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const chatsRowSchema = z.object({
  booking_id: z.string(),
  created_at: z.string(),
  customer_id: z.string(),
  id: z.string(),
  stylist_id: z.string(),
  updated_at: z.string(),
});

export const chatsInsertSchema = z.object({
  booking_id: z.string(),
  created_at: z.string().optional(),
  customer_id: z.string(),
  id: z.string().optional(),
  stylist_id: z.string(),
  updated_at: z.string().optional(),
});

export const chatsUpdateSchema = z.object({
  booking_id: z.string().optional(),
  created_at: z.string().optional(),
  customer_id: z.string().optional(),
  id: z.string().optional(),
  stylist_id: z.string().optional(),
  updated_at: z.string().optional(),
});

export const chatsRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("chats_booking_id_fkey"),
    columns: z.tuple([z.literal("booking_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("bookings"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("chats_customer_id_fkey"),
    columns: z.tuple([z.literal("customer_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("chats_stylist_id_fkey"),
    columns: z.tuple([z.literal("stylist_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const mediaTypeSchema = z.union([
  z.literal("avatar"),
  z.literal("service_image"),
  z.literal("review_image"),
  z.literal("chat_image"),
  z.literal("landing_asset"),
  z.literal("logo_asset"),
  z.literal("other"),
]);

export const mediaInsertSchema = z.object({
  chat_message_id: z.string().optional().nullable(),
  created_at: z.string().optional(),
  file_path: z.string(),
  id: z.string().optional(),
  media_type: mediaTypeSchema,
  owner_id: z.string(),
  service_id: z.string().optional().nullable(),
});

export const mediaUpdateSchema = z.object({
  chat_message_id: z.string().optional().nullable(),
  created_at: z.string().optional(),
  file_path: z.string().optional(),
  id: z.string().optional(),
  media_type: mediaTypeSchema.optional(),
  owner_id: z.string().optional(),
  service_id: z.string().optional().nullable(),
});

export const mediaRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("media_chat_message_id_fkey"),
    columns: z.tuple([z.literal("chat_message_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("chat_messages"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("media_owner_id_fkey"),
    columns: z.tuple([z.literal("owner_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("media_service_id_fkey"),
    columns: z.tuple([z.literal("service_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("services"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const userRoleSchema = z.union([
  z.literal("customer"),
  z.literal("stylist"),
  z.literal("studio"),
  z.literal("admin"),
]);

export const profilesInsertSchema = z.object({
  avatar_url: z.string().optional().nullable(),
  bankid_verified: z.boolean().optional(),
  created_at: z.string().optional(),
  email: z.string().optional().nullable(),
  full_name: z.string().optional().nullable(),
  gender: z.string().optional().nullable(),
  id: z.string(),
  phone_number: z.string().optional().nullable(),
  role: userRoleSchema.optional(),
  stripe_customer_id: z.string().optional().nullable(),
  subscribed_to_newsletter: z.boolean().optional(),
  updated_at: z.string().optional(),
});

export const profilesUpdateSchema = z.object({
  avatar_url: z.string().optional().nullable(),
  bankid_verified: z.boolean().optional(),
  created_at: z.string().optional(),
  email: z.string().optional().nullable(),
  full_name: z.string().optional().nullable(),
  gender: z.string().optional().nullable(),
  id: z.string().optional(),
  phone_number: z.string().optional().nullable(),
  role: userRoleSchema.optional(),
  stripe_customer_id: z.string().optional().nullable(),
  subscribed_to_newsletter: z.boolean().optional(),
  updated_at: z.string().optional(),
});

export const profilesRelationshipsSchema = z.tuple([]);

export const serviceCategoriesRowSchema = z.object({
  id: z.string(),
  name: z.string(),
  parent_category_id: z.string().nullable(),
});

export const serviceCategoriesInsertSchema = z.object({
  id: z.string().optional(),
  name: z.string(),
  parent_category_id: z.string().optional().nullable(),
});

export const serviceCategoriesUpdateSchema = z.object({
  id: z.string().optional(),
  name: z.string().optional(),
  parent_category_id: z.string().optional().nullable(),
});

export const serviceCategoriesRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("service_categories_parent_category_id_fkey"),
    columns: z.tuple([z.literal("parent_category_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("service_categories"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const servicesRowSchema = z.object({
  at_customers_place: z.boolean(),
  at_stylists_place: z.boolean(),
  category_id: z.string(),
  created_at: z.string(),
  description: z.string().nullable(),
  duration_minutes: z.number(),
  id: z.string(),
  price: z.number(),
  stylist_id: z.string(),
  title: z.string(),
  updated_at: z.string(),
});

export const servicesInsertSchema = z.object({
  at_customers_place: z.boolean().optional(),
  at_stylists_place: z.boolean().optional(),
  category_id: z.string(),
  created_at: z.string().optional(),
  description: z.string().optional().nullable(),
  duration_minutes: z.number(),
  id: z.string().optional(),
  price: z.number(),
  stylist_id: z.string(),
  title: z.string(),
  updated_at: z.string().optional(),
});

export const servicesUpdateSchema = z.object({
  at_customers_place: z.boolean().optional(),
  at_stylists_place: z.boolean().optional(),
  category_id: z.string().optional(),
  created_at: z.string().optional(),
  description: z.string().optional().nullable(),
  duration_minutes: z.number().optional(),
  id: z.string().optional(),
  price: z.number().optional(),
  stylist_id: z.string().optional(),
  title: z.string().optional(),
  updated_at: z.string().optional(),
});

export const servicesRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("services_category_id_fkey"),
    columns: z.tuple([z.literal("category_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("service_categories"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
  z.object({
    foreignKeyName: z.literal("services_stylist_id_fkey"),
    columns: z.tuple([z.literal("stylist_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const stylistUnavailabilityRowSchema = z.object({
  end_time: z.string(),
  id: z.string(),
  start_time: z.string(),
  stylist_id: z.string(),
});

export const stylistUnavailabilityInsertSchema = z.object({
  end_time: z.string(),
  id: z.string().optional(),
  start_time: z.string(),
  stylist_id: z.string(),
});

export const stylistUnavailabilityUpdateSchema = z.object({
  end_time: z.string().optional(),
  id: z.string().optional(),
  start_time: z.string().optional(),
  stylist_id: z.string().optional(),
});

export const stylistUnavailabilityRelationshipsSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("stylist_unavailability_stylist_id_fkey"),
    columns: z.tuple([z.literal("stylist_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("profiles"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const applicationsRowSchema = z.object({
  application_status: applicationStatusSchema,
  application_type: applicationTypeSchema,
  created_at: z.string(),
  id: z.string(),
  user_id: z.string(),
});

export const bookingsRowSchema = z.object({
  address_id: z.string().nullable(),
  created_at: z.string(),
  customer_id: z.string(),
  end_time: z.string(),
  id: z.string(),
  message_to_stylist: z.string().nullable(),
  service_id: z.string(),
  start_time: z.string(),
  status: bookingStatusSchema,
  stripe_payment_intent_id: z.string().nullable(),
  stripe_payment_status: z.string().nullable(),
  stylist_id: z.string(),
  updated_at: z.string(),
});

export const mediaRowSchema = z.object({
  chat_message_id: z.string().nullable(),
  created_at: z.string(),
  file_path: z.string(),
  id: z.string(),
  media_type: mediaTypeSchema,
  owner_id: z.string(),
  service_id: z.string().nullable(),
});

export const profilesRowSchema = z.object({
  avatar_url: z.string().nullable(),
  bankid_verified: z.boolean(),
  created_at: z.string(),
  email: z.string().nullable(),
  full_name: z.string().nullable(),
  gender: z.string().nullable(),
  id: z.string(),
  phone_number: z.string().nullable(),
  role: userRoleSchema,
  stripe_customer_id: z.string().nullable(),
  subscribed_to_newsletter: z.boolean(),
  updated_at: z.string(),
});
